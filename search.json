[{"path":"https://ropensci.github.io/git2rdata/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behaviour participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behaviour may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. E.g. edit roxygen2 comment .R file R/, .Rd file man/.","code":""},{"path":"https://ropensci.github.io/git2rdata/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reproducible example.","code":""},{"path":"https://ropensci.github.io/git2rdata/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look GitHub Actions build status making changes. README contain badges continuous integration services used package. require tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://ropensci.github.io/git2rdata/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ropensci.github.io/git2rdata/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://ropensci.github.io/git2rdata/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"GNU GENERAL PUBLIC LICENSE","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU GENERAL PUBLIC LICENSE","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU GENERAL PUBLIC LICENSE","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU GENERAL PUBLIC LICENSE","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU GENERAL PUBLIC LICENSE","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU GENERAL PUBLIC LICENSE","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU GENERAL PUBLIC LICENSE","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU GENERAL PUBLIC LICENSE","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU GENERAL PUBLIC LICENSE","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU GENERAL PUBLIC LICENSE","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU GENERAL PUBLIC LICENSE","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU GENERAL PUBLIC LICENSE","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU GENERAL PUBLIC LICENSE","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU GENERAL PUBLIC LICENSE","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ropensci.github.io/git2rdata/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU GENERAL PUBLIC LICENSE","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":"https://ropensci.github.io/git2rdata/articles/efficiency.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Efficiency Relative to Storage and Time","text":"vignette compares storage retrieval data git2rdata standard R functionality. consider write.table() read.table() data stored plain text format. saveRDS() readRDS() use compressed binary format. get meaningful results, use nassCDS dataset DAAG package.  ’ll avoid dependency package directly downloading data.","code":"airbag <- read.csv(   \"https://vincentarelbundock.github.io/Rdatasets/csv/DAAG/nassCDS.csv\" ) airbag$dead <- airbag$dead == \"dead\" airbag$airbag <- airbag$airbag == \"airbag\" airbag$seatbelt <- airbag$seatbelt == \"belted\" airbag$dvcat <- as.ordered(airbag$dvcat) str(airbag) #> 'data.frame':    26217 obs. of  16 variables: #>  $ X          : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ dvcat      : Ord.factor w/ 5 levels \"1-9km/h\"<\"10-24\"<..: 3 2 2 3 3 4 5 5 2 2 ... #>  $ weight     : num  25.1 25.1 32.4 495.4 25.1 ... #>  $ dead       : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ airbag     : logi  FALSE TRUE FALSE TRUE FALSE FALSE ... #>  $ seatbelt   : logi  TRUE TRUE FALSE TRUE TRUE TRUE ... #>  $ frontal    : int  1 1 1 1 1 1 1 1 0 1 ... #>  $ sex        : Factor w/ 2 levels \"f\",\"m\": 1 1 1 1 1 1 2 2 2 1 ... #>  $ ageOFocc   : int  26 72 69 53 32 22 22 32 40 18 ... #>  $ yearacc    : int  1997 1997 1997 1997 1997 1997 1997 1997 1997 1997 ... #>  $ yearVeh    : int  1990 1995 1988 1995 1988 1985 1984 1987 1984 1987 ... #>  $ abcat      : Factor w/ 3 levels \"deploy\",\"nodeploy\",..: 3 1 3 1 3 3 3 3 3 3 ... #>  $ occRole    : Factor w/ 2 levels \"driver\",\"pass\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ deploy     : int  0 1 0 1 0 0 0 0 0 0 ... #>  $ injSeverity: int  3 1 4 1 3 3 3 4 1 0 ... #>  $ caseid     : Factor w/ 9409 levels \"11:1:1\",\"11:1:2\",..: 1645 1646 1688 1488 1510 1511 1555 1556 1571 1572 ..."},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/articles/efficiency.html","id":"on-a-file-system","dir":"Articles","previous_headings":"Data Storage","what":"On a File System","title":"Efficiency Relative to Storage and Time","text":"start writing dataset write.table(), saveRDS(), write_vc() write_vc() without storage optimization. Note write_vc() uses optimization default. Since write_vc() creates two files data set, take combined file size account. Since data highly compressible, saveRDS() yields smallest file cost binary file format. write_vc() formats yield smaller files write.table(). Partly write_vc() doesn’t store row names doesn’t use quotes unless needed. difference optimized verbose version write_vc() , case, solely due way write_vc() stores factors data (tsv) file. optimized version stores indices factor whereas verbose version stores levels. example: airbag$dvcat 5 levels short labels (average 5 character), storing index requires 1 character. results compact files. Resulting file sizes (kB) file sizes relative size write.table(). reduction file size storing factors depends length labels, number levels number observations. figure illustrates strong gain soon level labels contain two characters. gain less pronounced factor large number levels. optimization fails extreme cases short factor labels high number levels. Effect label length efficiency storing factor optimized, assuming 1000 observations effect number observations mainly due overhead storing metadata. importance overhead increases number observations small. Effect number observations efficiency storing factor optimized assuming labels 10 characters","code":"library(git2rdata) root <- tempfile(\"git2rdata-efficient\") dir.create(root) write.table(airbag, file.path(root, \"base_R.tsv\"), sep = \"\\t\") base_size <- file.size(file.path(root, \"base_R.tsv\"))  saveRDS(airbag, file.path(root, \"base_R.rds\")) rds_size <- file.size(file.path(root, \"base_R.rds\"))  fn <- write_vc(airbag, \"airbag_optimize\", root, sorting = \"X\") #> Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, #> : `digits` was not set. Setting is automatically to 6. See ?meta optim_size <- sum(file.size(file.path(root, fn)))  fn <- write_vc(airbag, \"airbag_verbose\", root, sorting = \"X\", optimize = FALSE) #> Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, #> : `digits` was not set. Setting is automatically to 6. See ?meta verbose_size <- sum(file.size(file.path(root, fn)))"},{"path":"https://ropensci.github.io/git2rdata/articles/efficiency.html","id":"in-git-repositories","dir":"Articles","previous_headings":"Data Storage","what":"In Git Repositories","title":"Efficiency Relative to Storage and Time","text":"simulate much space data requires store history git repository. create git repository method store different subsets data. commit contains new version data. version random sample containing 90% observations airbag data. Two consecutive versions subset 90% observations common. writing version, commit file, perform garbage collection (git gc) git repository calculate size git history (git count-objects -v). version data purpose random order observations variables. happen worst case scenario generate largest possible diff. also test write.table() stable ordering observations variables. randomised write.table() yields largest git repository, converging 6.5 times size git repository based sorted write.table(). saveRDS() yields 26% reduction repository size compared randomised write.table(), still 4.8 times larger sorted write.table(). Note gain storing binary files git repository much smaller gain individual file size git compresses history. optimized write_vc() starts 88% converges toward 78%, verbose version starts 94% converges towards 110%. Storage size lot smaller using write_vc() optimization. verbose option write_vc() little gain storage size. Another advantage write_vc() stores metadata. Size git history using different storage methods. Relative size git repository compared write.table().","code":"library(git2r) tmp_repo <- function() {   root <- tempfile(\"git2rdata-efficient-git\")   dir.create(root)   repo <- git2r::init(root)   git2r::config(repo, user.name = \"me\", user.email = \"me@me.com\")   return(repo) } commit_and_size <- function(repo, filename) {   add(repo, filename)   commit(repo, \"test\", session = TRUE)   git_size <- system(     sprintf(\"cd %s\\ngit gc\\ngit count-objects -v\", dirname(repo$path)),     intern = TRUE   )   git_size <- git_size[grep(\"size-pack\", git_size)]   as.integer(gsub(\".*: (.*)\", \"\\\\1\", git_size)) }  repo_wt <- tmp_repo() repo_wts <- tmp_repo() repo_rds <- tmp_repo() repo_wvco <- tmp_repo() repo_wvcv <- tmp_repo()  repo_size <- replicate(   100, {     observed_subset <- rbinom(nrow(airbag), size = 1, prob = 0.9) == 1     this <- airbag[       sample(which(observed_subset)),       sample(ncol(airbag))     ]     this_sorted <- airbag[observed_subset, ]     fn_wt <- file.path(workdir(repo_wt), \"base_R.tsv\")     write.table(this, fn_wt, sep = \"\\t\")     fn_wts <- file.path(workdir(repo_wts), \"base_R.tsv\")     write.table(this_sorted, fn_wts, sep = \"\\t\")     fn_rds <- file.path(workdir(repo_rds), \"base_R.rds\")     saveRDS(this, fn_rds)     fn_wvco <- write_vc(this, \"airbag_optimize\", repo_wvco, sorting = \"X\")     fn_wvcv <- write_vc(       this, \"airbag_verbose\", repo_wvcv, sorting = \"X\", optimize = FALSE     )     c(       write.table = commit_and_size(repo_wt, fn_wt),       write.table.sorted = commit_and_size(repo_wts, fn_wts),       saveRDS = commit_and_size(repo_rds, fn_rds),       write_vc.optimized = commit_and_size(repo_wvco, fn_wvco),       write_vc.verbose = commit_and_size(repo_wvcv, fn_wvcv)     ) })"},{"path":"https://ropensci.github.io/git2rdata/articles/efficiency.html","id":"timings","dir":"Articles","previous_headings":"","what":"Timings","title":"Efficiency Relative to Storage and Time","text":"code runs microbenchmark four methods. microbenchmark runs code hundred times yields distribution timings expression.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/efficiency.html","id":"writing-data","dir":"Articles","previous_headings":"Timings","what":"Writing Data","title":"Efficiency Relative to Storage and Time","text":"write_vc() takes 155% 185% time write.table() needs prepare metadata sort observations variables. overwriting existing data, write_vc() checks new data existing metadata. saveRDS() requires 53% time write.table() needs. Boxplot write timings different methods.","code":"library(microbenchmark) mb <- microbenchmark(   write.table = write.table(airbag, file.path(root, \"base_R.tsv\"), sep = \"\\t\"),   saveRDS = saveRDS(airbag, file.path(root, \"base_R.rds\")),   write_vc.optim = write_vc(airbag, \"airbag_optimize\", root, sorting = \"X\"),   write_vc.verbose = write_vc(airbag, \"airbag_verbose\", root, sorting = \"X\",                               optimize = FALSE) ) mb$time <- mb$time / 1e6"},{"path":"https://ropensci.github.io/git2rdata/articles/efficiency.html","id":"reading-data","dir":"Articles","previous_headings":"Timings","what":"Reading Data","title":"Efficiency Relative to Storage and Time","text":"timings reading data another story. Reading binary format takes 10% time needed read standard plain text format using read.table(). read_vc() takes 214% (optimized) 257% (verbose) time needed read.table(), first seems strange read_vc() calls read.table() read files extra work convert variables correct data type. main difference read_vc() knows required data type priori passes info read.table(). Otherwise, read.table() guess correct data type file. Boxplots read timings different methods.","code":"mb <- microbenchmark(   read.table = read.table(file.path(root, \"base_R.tsv\"), header = TRUE,                           sep = \"\\t\"),   readRDS = readRDS(file.path(root, \"base_R.rds\")),   read_vc.optim = read_vc(\"airbag_optimize\", root),   read_vc.verbose = read_vc(\"airbag_verbose\", root) ) mb$time <- mb$time / 1e6"},{"path":"https://ropensci.github.io/git2rdata/articles/metadata.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding metadata","text":"git2rdata supports extra metadata since version 0.4.1. Metadata stored separate file name data file, extension .yml. metadata file YAML file specific structure. metadata file contains generic section section field data file. generic section contains information data file whole. fields sections contain information fields data file. metadata file stored directory data file. generic section contains following mandatory properties, automatically created git2rdata: git2rdata: version git2rdata used create metadata. datahash: hash data file. hash: hash metadata file. optimize: logical indicating whether data file optimized git2rdata. sorting: character vector names fields data file. split_by: character vector names fields used split data file. NA string: string used represent missing values data file. generic section can contain following optional properties: table name: name dataset. title: title dataset. description: description dataset. fields sections contain following mandatory properties, automatically created git2rdata: type: type field. class: class field. levels: levels field (factors). index: index field (factors). NA string: string used represent missing values field. fields sections can contain following optional properties: description: description field.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/metadata.html","id":"adding-metadata","dir":"Articles","previous_headings":"","what":"Adding metadata","title":"Adding metadata","text":"write_vc() stores mandatory properties metadata file.","code":"library(git2rdata) root <- tempfile(\"git2rdata-metadata\") dir.create(root) write_vc(iris, file = \"iris\", root = root, sorting = \"Sepal.Length\") ## Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, ## : `digits` was not set. Setting is automatically to 6. See ?meta ## Warning: Sorting on 'Sepal.Length' results in ties. ## Add extra sorting variables to ensure small diffs. ## 9282fad022c924c16a76bd8b3c174e71fc4515fe  ##                               \"iris.tsv\"  ## f5eda4fcbe143eefc267a51a511110c604848272  ##                               \"iris.yml\""},{"path":"https://ropensci.github.io/git2rdata/articles/metadata.html","id":"reading-metadata","dir":"Articles","previous_headings":"","what":"Reading metadata","title":"Adding metadata","text":"read_vc() reads metadata file adds attributes data.frame. print() summary() alert user display_metadata() function. function displays metadata git2rdata object. Missing optional metadata results NA value output display_metadata().","code":"my_iris <- read_vc(\"iris\", root = root) str(my_iris) ## Classes 'git2rdata' and 'data.frame':    150 obs. of  5 variables: ##  $ Sepal.Length: num  4.3 4.4 4.4 4.4 4.5 4.6 4.6 4.6 4.6 4.7 ... ##  $ Sepal.Width : num  3 2.9 3 3.2 2.3 3.1 3.4 3.6 3.2 3.2 ... ##  $ Petal.Length: num  1.1 1.4 1.3 1.3 1.3 1.5 1.4 1 1.4 1.3 ... ##  $ Petal.Width : num  0.1 0.2 0.2 0.2 0.3 0.2 0.3 0.2 0.2 0.2 ... ##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... ##  - attr(*, \"source\")= Named chr [1:2] \"/tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.tsv\" \"/tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.yml\" ##   ..- attr(*, \"names\")= chr [1:2] \"9282fad022c924c16a76bd8b3c174e71fc4515fe\" \"f5eda4fcbe143eefc267a51a511110c604848272\" ##  - attr(*, \"optimize\")= logi TRUE ##  - attr(*, \"sorting\")= chr \"Sepal.Length\" print(head(my_iris)) ##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1          4.3         3.0          1.1         0.1  setosa ## 2          4.4         2.9          1.4         0.2  setosa ## 3          4.4         3.0          1.3         0.2  setosa ## 4          4.4         3.2          1.3         0.2  setosa ## 5          4.5         2.3          1.3         0.3  setosa ## 6          4.6         3.1          1.5         0.2  setosa ##  ## Use `display_metadata()` to view the metadata. summary(my_iris) ##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width    ##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100   ##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300   ##  Median :5.800   Median :3.000   Median :4.350   Median :1.300   ##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199   ##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800   ##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500   ##        Species   ##  setosa    :50   ##  versicolor:50   ##  virginica :50   ##                  ##                  ##                  ##  ## Use `display_metadata()` to view the metadata. display_metadata(my_iris) ## Table name: NA ## Title: NA ## Description: NA ## Path: /tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.tsv (9282fad022c924c16a76bd8b3c174e71fc4515fe), /tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.yml (f5eda4fcbe143eefc267a51a511110c604848272) ## Sorting order: Sepal.Length ## Optimized storage: TRUE ## Variables: ##   - Sepal.Length: NA ##   - Sepal.Width: NA ##   - Petal.Length: NA ##   - Petal.Width: NA ##   - Species: NA"},{"path":"https://ropensci.github.io/git2rdata/articles/metadata.html","id":"updating-the-optional-metadata","dir":"Articles","previous_headings":"","what":"Updating the optional metadata","title":"Adding metadata","text":"add metadata git2rdata object, use update_metadata() function. function allows add update optional metadata git2rdata object. Setting argument NA empty string remove corresponding property metadata. function updates metadata file, data file. see changes, read object using display_metadata(). Note metadata available data.frame attributes.","code":"update_metadata(   file = \"iris\", root = root, name = \"iris\", title = \"Iris dataset\",   description = \"The Iris dataset is a multivariate dataset introduced by the British statistician and biologist Ronald Fisher in his 1936 paper The use of multiple measurements in taxonomic problems.\",   field_description = c(     Sepal.Length = \"The length of the sepal in cm\",     Sepal.Width = \"The width of the sepal in cm\",     Petal.Length = \"The length of the petal in cm\",     Petal.Width = \"The width of the petal in cm\",     Species = \"The species of the iris\"   ) ) my_iris <- read_vc(\"iris\", root = root) display_metadata(my_iris) ## Table name: iris ## Title: Iris dataset ## Description: The Iris dataset is a multivariate dataset introduced by the British ## statistician and biologist Ronald Fisher in his 1936 paper The use of multiple ## measurements in taxonomic problems. ## Path: /tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.tsv (9282fad022c924c16a76bd8b3c174e71fc4515fe), /tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.yml (df99ace999393dbd1ddd39f3b3bfc8ef0716430e) ## Sorting order: Sepal.Length ## Optimized storage: TRUE ## Variables: ##   - Sepal.Length: The length of the sepal in cm ##   - Sepal.Width: The width of the sepal in cm ##   - Petal.Length: The length of the petal in cm ##   - Petal.Width: The width of the petal in cm ##   - Species: The species of the iris str(my_iris) ## Classes 'git2rdata' and 'data.frame':    150 obs. of  5 variables: ##  $ Sepal.Length: num  4.3 4.4 4.4 4.4 4.5 4.6 4.6 4.6 4.6 4.7 ... ##   ..- attr(*, \"description\")= chr \"The length of the sepal in cm\" ##  $ Sepal.Width : num  3 2.9 3 3.2 2.3 3.1 3.4 3.6 3.2 3.2 ... ##   ..- attr(*, \"description\")= chr \"The width of the sepal in cm\" ##  $ Petal.Length: num  1.1 1.4 1.3 1.3 1.3 1.5 1.4 1 1.4 1.3 ... ##   ..- attr(*, \"description\")= chr \"The length of the petal in cm\" ##  $ Petal.Width : num  0.1 0.2 0.2 0.2 0.3 0.2 0.3 0.2 0.2 0.2 ... ##   ..- attr(*, \"description\")= chr \"The width of the petal in cm\" ##  $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... ##   ..- attr(*, \"description\")= chr \"The species of the iris\" ##  - attr(*, \"source\")= Named chr [1:2] \"/tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.tsv\" \"/tmp/RtmpG87n8J/git2rdata-metadata15e0692569/iris.yml\" ##   ..- attr(*, \"names\")= chr [1:2] \"9282fad022c924c16a76bd8b3c174e71fc4515fe\" \"df99ace999393dbd1ddd39f3b3bfc8ef0716430e\" ##  - attr(*, \"table name\")= chr \"iris\" ##  - attr(*, \"title\")= chr \"Iris dataset\" ##  - attr(*, \"description\")= chr \"The Iris dataset is a multivariate dataset introduced by the British\\nstatistician and biologist Ronald Fisher \"| __truncated__ ##  - attr(*, \"optimize\")= logi TRUE ##  - attr(*, \"sorting\")= chr \"Sepal.Length\""},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started Storing Dataframes as Plain Text","text":"vignette motivates wrote git2rdata illustrates can use store dataframes plain text files.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"maintaining-variable-classes","dir":"Articles","previous_headings":"Introduction","what":"Maintaining Variable Classes","title":"Getting Started Storing Dataframes as Plain Text","text":"R different options store dataframes plain text files R. Base R write.table() companions like write.csv(). options data.table::fwrite(), readr::write_delim(), readr::write_csv() readr::write_tsv(). writes dataframe plain text file converting variables characters. reading file, revert conversion. distinction character factor gets lost translation. read.table() converts default strings factors, readr::read_csv() keeps default strings character. functions recover factor levels. functions determine factor levels based observed levels plain text file. Hence factor levels without observations disappear. order factor levels also determined available levels plain text file, can different original order. write_vc() read_vc() functions git2rdata keep track class variable , case factor, also factor levels order. Hence function pair preserves information content dataframe. vc suffix stands version control functions use full capacity combination version control system.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"optimizing-file-storage","dir":"Articles","previous_headings":"Efficiency Relative to Storage and Time","what":"Optimizing File Storage","title":"Getting Started Storing Dataframes as Plain Text","text":"Plain text files require disk space binary files. price pay readable file format. default option write_vc() create file compact possible. Since use tab delimited file format, can omit quotes around character variables. saves 2 bytes per row character variable. write_vc add quotes automatically exceptional cases needed , e.g. store string contains tab newline characters. don’t add quotes row-variable combinations don’t need . Since store class variable, can reduce file size following rules: Store logical 0 (FALSE), 1 (TRUE) NA data. Store factor indices data. Store index, labels levels order metadata. Store POSIXct numeric data. Store class origin metadata. Store return timestamps UTC. Store Date integer data. Store class origin metadata. Storing factors, POSIXct  Date index, makes less user readable. user can turn optimization user readability important file size.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"optimized-for-version-control","dir":"Articles","previous_headings":"Efficiency Relative to Storage and Time","what":"Optimized for Version Control","title":"Getting Started Storing Dataframes as Plain Text","text":"Another main goal git2rdata optimise storage plain text files version control. write_vc() read_vc() methods interacting git repositories using git2r framework. Users want use git without git2r use different version control system (e.g. Subversion, Mercurial), still can use git2rdata write files disk uses preferred workflow version control. Hence, write_vc() always perform checks look changes potentially lead large diffs. details vignette(\"version_control\", package = \"git2rdata\"). problems always yield warning. problems yield error default. user can turn errors warnings setting strict = FALSE argument. vignette ignores part version control, always use write_vc(strict = FALSE) hide warnings improve readability.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Getting Started Storing Dataframes as Plain Text","text":"Let’s start setting environment. need directory store data dataframe store.","code":"# Create a directory in tempdir path <- tempfile(pattern = \"git2r-\") dir.create(path) # Create dummy data set.seed(20190222) x <- data.frame(   x = sample(LETTERS),   y = factor(     sample(c(\"a\", \"b\", NA), 26, replace = TRUE),     levels = c(\"a\", \"b\", \"c\")   ),   z = c(NA, 1:25),   abc = c(rnorm(25), NA),   def = sample(c(TRUE, FALSE, NA), 26, replace = TRUE),   timestamp = seq(     as.POSIXct(\"2018-01-01\"),     as.POSIXct(\"2019-01-01\"),     length = 26   ),   stringsAsFactors = FALSE ) str(x) #> 'data.frame':    26 obs. of  6 variables: #>  $ x        : chr  \"V\" \"U\" \"Z\" \"W\" ... #>  $ y        : Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 NA NA 1 NA 2 1 NA 1 ... #>  $ z        : int  NA 1 2 3 4 5 6 7 8 9 ... #>  $ abc      : num  -0.382 -0.42 -0.917 0.387 -0.992 ... #>  $ def      : logi  TRUE FALSE NA FALSE NA NA ... #>  $ timestamp: POSIXct, format: \"2018-01-01 00:00:00\" \"2018-01-15 14:24:00\" ..."},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"storing-optimized","dir":"Articles","previous_headings":"","what":"Storing Optimized","title":"Getting Started Storing Dataframes as Plain Text","text":"Use write_vc() store dataframe. root argument refers base directory store data. file argument becomes base name files. data file gets .tsv extension, metadata file .yml extension. file can include relative path starting root. write_vc() returns vector relative paths raw data metadata files. names vector contains hashes files. can look files. ’ll display first 10 rows raw data. Notice YAML format metadata benefit human machine readable.","code":"library(git2rdata) write_vc(x = x, file = \"first_test\", root = path, strict = FALSE) #> 2b0ac8243ca27ed3d983ba8fc27a3bca7ca8f39d 79e04b2ecff2c1eac8ededc69ba09311f38f74da  #>                         \"first_test.tsv\"                         \"first_test.yml\" print_file <- function(file, root, n = -1) {   fn <- file.path(root, file)   data <- readLines(fn, n = n)   cat(data, sep = \"\\n\") } print_file(\"first_test.tsv\", path, 10) #> x    y   z   abc def timestamp #> V    1   NA  -0.38201    1   1514764800 #> U    2   1   -0.420348   0   1516026240 #> Z    NA  2   -0.916731   NA  1517287680 #> W    NA  3   0.387455    0   1518549120 #> L    1   4   -0.992355   NA  1519810560 #> C    NA  5   0.0228714   NA  1521072000 #> R    2   6   -0.947557   1   1522333440 #> S    1   7   -0.163029   NA  1523594880 #> O    NA  8   0.523643    1   1524856320 print_file(\"first_test.yml\", path) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   hash: 79e04b2ecff2c1eac8ededc69ba09311f38f74da #>   data_hash: 2b0ac8243ca27ed3d983ba8fc27a3bca7ca8f39d #> x: #>   class: character #> 'y': #>   class: factor #>   labels: #>   - a #>   - b #>   - c #>   index: #>   - 1 #>   - 2 #>   - 3 #>   ordered: no #> z: #>   class: integer #> abc: #>   class: numeric #>   digits: 6 #> def: #>   class: logical #> timestamp: #>   class: POSIXct #>   origin: 1970-01-01 00:00:00 #>   timezone: UTC"},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"storing-verbose","dir":"Articles","previous_headings":"","what":"Storing Verbose","title":"Getting Started Storing Dataframes as Plain Text","text":"Adding optimize = FALSE write_vc() keep raw data human readable format. metadata file slightly different. obvious optimize: tag different hash. Another difference metadata POSIXct  Date classes. longer origin tag format tag. Another important difference store data file comma separated values instead tab separated values. noticed csv file format easily recognised larger audience data file.","code":"write_vc(x = x, file = \"verbose\", root = path, optimize = FALSE, strict = FALSE) #> a8979a8d3737e28729523ce04932453f1efbe04a 14cb4010f7f9f65eac46751c055904fc1e7d74e4  #>                            \"verbose.csv\"                            \"verbose.yml\" print_file(\"verbose.csv\", path, 10) #> x,y,z,abc,def,timestamp #> V,a,NA,-0.38201,TRUE,2018-01-01T00:00:00Z #> U,b,1,-0.420348,FALSE,2018-01-15T14:24:00Z #> Z,NA,2,-0.916731,NA,2018-01-30T04:48:00Z #> W,NA,3,0.387455,FALSE,2018-02-13T19:12:00Z #> L,a,4,-0.992355,NA,2018-02-28T09:36:00Z #> C,NA,5,0.0228714,NA,2018-03-15T00:00:00Z #> R,b,6,-0.947557,TRUE,2018-03-29T14:24:00Z #> S,a,7,-0.163029,NA,2018-04-13T04:48:00Z #> O,NA,8,0.523643,TRUE,2018-04-27T19:12:00Z print_file(\"verbose.yml\", path) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: no #>   NA string: NA #>   hash: 14cb4010f7f9f65eac46751c055904fc1e7d74e4 #>   data_hash: a8979a8d3737e28729523ce04932453f1efbe04a #> x: #>   class: character #> 'y': #>   class: factor #>   labels: #>   - a #>   - b #>   - c #>   index: #>   - 1 #>   - 2 #>   - 3 #>   ordered: no #> z: #>   class: integer #> abc: #>   class: numeric #>   digits: 6 #> def: #>   class: logical #> timestamp: #>   class: POSIXct #>   format: '%Y-%m-%dT%H:%M:%SZ' #>   timezone: UTC"},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"efficiency-relative-to-file-storage","dir":"Articles","previous_headings":"","what":"Efficiency Relative to File Storage","title":"Getting Started Storing Dataframes as Plain Text","text":"Storing dataframes optimized verbose impact required file size. efficiency vignette give comparison.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading Data","title":"Getting Started Storing Dataframes as Plain Text","text":"retrieve data read_vc(). function reinstate variables original state. read_vc() requires meta data. handle dataframe stored write_vc().","code":"y <- read_vc(file = \"first_test\", root = path) all.equal(x, y, check.attributes = FALSE) #> [1] \"Component \\\"abc\\\": Mean relative difference: 5.679135e-07\"                   #> [2] \"Component \\\"timestamp\\\": 'tzone' attributes are inconsistent ('' and 'UTC')\" y2 <- read_vc(file = \"verbose\", root = path) all.equal(x, y2, check.attributes = FALSE) #> [1] \"Component \\\"abc\\\": Mean relative difference: 5.679135e-07\"                   #> [2] \"Component \\\"timestamp\\\": 'tzone' attributes are inconsistent ('' and 'UTC')\""},{"path":"https://ropensci.github.io/git2rdata/articles/plain_text.html","id":"missing-values","dir":"Articles","previous_headings":"","what":"Missing Values","title":"Getting Started Storing Dataframes as Plain Text","text":"write_vc() na argument specifies string use missing values. avoid using quotes, string must different character value data. includes factor labels verbose data storage. write_vc() checks always return error, even strict = FALSE. Please note write_vc() uses NA string entire dataset, thus every variable. default string missing values \"NA\". recommend keep default, long dataset permits . first good alternative empty string (\"\"). won’t work either, ’ll use imagination. Try keep short, clear robust1.","code":"write_vc(x, \"custom_na\", path, strict = FALSE, na = \"X\", optimize = FALSE) #> Error: one of the strings matches the NA string ('X') #> Please use a different NA string or consider using a factor. write_vc(x, \"custom_na\", path, strict = FALSE, na = \"b\", optimize = FALSE) #> Error: one of the levels matches the NA string ('b'). #> Please use a different NA string or use optimize = TRUE write_vc(x, \"custom_na\", path, strict = FALSE, na = \"X\") #> Error: one of the strings matches the NA string ('X') #> Please use a different NA string or consider using a factor. write_vc(x, \"custom_na\", path, strict = FALSE, na = \"b\") #> 9af818152e63482469c89ea7432fda1216f5eaf1 42235e10f9b5734d8718d02799d3ca6760c6a640  #>                          \"custom_na.tsv\"                          \"custom_na.yml\" print_file(\"custom_na.tsv\", path, 10) #> x    y   z   abc def timestamp #> V    1   b   -0.38201    1   1514764800 #> U    2   1   -0.420348   0   1516026240 #> Z    b   2   -0.916731   b   1517287680 #> W    b   3   0.387455    0   1518549120 #> L    1   4   -0.992355   b   1519810560 #> C    b   5   0.0228714   b   1521072000 #> R    2   6   -0.947557   1   1522333440 #> S    1   7   -0.163029   b   1523594880 #> O    b   8   0.523643    1   1524856320 print_file(\"custom_na.yml\", path, 4) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: b write_vc(x, \"custom_na\", path, strict = FALSE, na = \"\") #> af77e2ece69634db88061c747cc833d868640218 e58a31060d6f1e2f42e3541bf26276fa1f8102f4  #>                          \"custom_na.tsv\"                          \"custom_na.yml\""},{"path":"https://ropensci.github.io/git2rdata/articles/split_by.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Storing Large Dataframes","text":"Sometimes, large dataframe one variables small number unique combinations. E.g. dataframe one factor variables. Storing entire dataframe single text file requires storing lots replicated data. row stores information every variable, even subset variables remains constant subset data. case can use split_by argument write_vc(). store large dataframe set tab separated files. One file every combination variables defined split_by. Every partial data file holds variables one combination split_by. remove split_by variables partial data files, reducing size. add index.tsv containing combinations split_by variables unique hash combination. hash becomes base name partial data files. Splitting dataframe smaller files makes easier handle version control system. total size depends amount replication dataframe. next section.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/split_by.html","id":"when-to-split-the-dataframe","dir":"Articles","previous_headings":"","what":"When to Split the Dataframe","title":"Storing Large Dataframes","text":"Let’s set following variables: ss: average number bytes store single line split_by variables. rr: average number bytes store single line remaining variables. hsh_s: number bytes store header split_by variables. hrh_r: number bytes store header remaining variables. NN: number rows dataframe. NsN_s: number unique combinations split_by variables. Storing dataframe write_vc() without split_by requires hs+hr+1h_s + h_r + 1 bytes header s+r+1s + r + 1 bytes every observation. total number bytes T0=hs+hr+1+N(s+r+1)T_0 = h_s + h_r + 1 + N (s + r + 1). +1+ 1 originate tab character separate split_by variables remaining variables. Storing dataframe write_vc() split_by requires index file store combinations split_by variables. use hsh_s bytes header NssN_s s data. headers partial data files require NshrN_s h_r bytes (NsN_s files hrh_r byte per file). data partial data files require NrN r bytes. total number bytes Ts=hs+Nss+Nshr+NrT_s = h_s + N_s s + N_s h_r + N r. can look ratio TsT_s T0T_0. TsT0=hs+Nss+Nshr+Nrhs+hr+1+N(s+r+1)\\frac{T_s}{T_0} = \\frac{h_s + N_s s + N_s h_r + N r}{h_s + h_r + 1 + N (s + r + 1)} Let’s simplify equation assuming need equal amount character headers data (hs=sh_s = s hr=rh_r = r). TsT0=s+Nss+Nsr+Nrs+r+1+N(s+r+1)\\frac{T_s}{T_0} = \\frac{s + N_s s + N_s r + N r}{s + r + 1 + N (s + r + 1)} TsT0=s+Nss+Nsr+Nrs+r+1+Ns+Nr+N\\frac{T_s}{T_0} = \\frac{s + N_s s + N_s r + N r}{s + r + 1 + N s + N r + N} Let assume s=ars = r 0<a0 < Ns=bNN_s = b N 0<b<10 < b < 1. TsT0=ar+Nabr+Nbr+Nrar+r+1+Nar+Nr+N\\frac{T_s}{T_0} = \\frac{r + N b r + N b r + N r}{r + r + 1 + N r + N r + N} TsT0=(+Nab+Nb+N)r(N+1)(ar+r+1)\\frac{T_s}{T_0} = \\frac{(+ N b + N b + N) r}{(N + 1) (r + r + 1)} TsT0=+Nab+Nb+N(N+1)(+1+1/r)\\frac{T_s}{T_0} = \\frac{+ N b + N b + N}{(N + 1) (+ 1 + 1 / r)}TsT0=+(ab+b+1)N(N+1)(+1+1/r)\\frac{T_s}{T_0} = \\frac{+ (b + b + 1) N }{(N + 1) (+ 1 + 1 / r)} NN large, can state ⋘Na \\lll N N/(N+1)≈1N / (N + 1) \\approx 1. TsT0≈ab+b+1a+1+1/r\\frac{T_s}{T_0} \\approx \\frac{b + b + 1}{+ 1 + 1 / r} Storage space required using split_by relative storing single file. figure illustrates using split_by efficient number unique combinations (NsN_s) split_by variables much smaller number rows dataframe (NN). efficiency also increases storage single combination split_by variables (ss) larger storage needed single line remain variables (rr). storage needed single line remain variables (rr) doesn’t influence efficiency.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/split_by.html","id":"benchmarking","dir":"Articles","previous_headings":"","what":"Benchmarking","title":"Storing Large Dataframes","text":"Splitting dataframe one file takes time write data. log time seems increase quadratic log number parts. Boxplot write timings different number parts. small number parts seem affect read timings much. ten parts, required time reading seems increase. log time seems increase quadratic log number parts. Boxplot read timings different number parts.","code":"library(git2rdata) root <- tempfile(\"git2rdata-split-by\") dir.create(root) library(microbenchmark) mb <- microbenchmark(   part_1 = write_vc(airbag, \"part_1\", root, sorting = \"X\"),   part_2 = write_vc(airbag, \"part_2\", root, sorting = \"X\", split_by = \"airbag\"),   part_3 = write_vc(airbag, \"part_3\", root, sorting = \"X\", split_by = \"abcat\"),   part_4 = write_vc(     airbag, \"part_4\", root, sorting = \"X\", split_by = c(\"airbag\", \"sex\")   ),   part_5 = write_vc(airbag, \"part_5\", root, sorting = \"X\", split_by = \"dvcat\"),   part_6 = write_vc(     airbag, \"part_6\", root, sorting = \"X\", split_by = \"yearacc\"   ),   part_15 = write_vc(     airbag, \"part_15\", root, sorting = \"X\", split_by = c(\"dvcat\", \"abcat\")   ),   part_45 = write_vc(     airbag, \"part_45\", root, sorting = \"X\", split_by = \"yearVeh\"   ),   part_270 = write_vc(     airbag, \"part_270\", root, sorting = \"X\", split_by = c(\"yearacc\", \"yearVeh\")   ) ) mb$time <- mb$time / 1e6 mb_r <- microbenchmark(   part_1 = read_vc(\"part_1\", root),   part_2 = read_vc(\"part_2\", root),   part_3 = read_vc(\"part_3\", root),   part_4 = read_vc(\"part_4\", root),   part_5 = read_vc(\"part_5\", root),   part_6 = read_vc(\"part_6\", root),   part_15 = read_vc(\"part_15\", root),   part_45 = read_vc(\"part_45\", root),   part_270 = read_vc(\"part_270\", root) ) mb_r$time <- mb_r$time / 1e6"},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Optimizing Storage for Version Control","text":"vignette focuses git2rdata make storing dataframes version control efficient convenient. vignette(\"plain_text\", package = \"git2rdata\") describes details actual file format. Hence discuss optimize na arguments write_vc() function. illustrate efficiency write_vc() read_vc(). vignette(\"efficiency\", package = \"git2rdata\") covers topics.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Optimizing Storage for Version Control","text":"","code":"# Create a directory in tempdir root <- tempfile(pattern = \"git2r-\") dir.create(root) # Create dummy data set.seed(20190222) x <- data.frame(   x = sample(LETTERS),   y = factor(     sample(c(\"a\", \"b\", NA), 26, replace = TRUE),     levels = c(\"a\", \"b\", \"c\")   ),   z = c(NA, 1:25),   abc = c(rnorm(25), NA),   def = sample(c(TRUE, FALSE, NA), 26, replace = TRUE),   timestamp = seq(     as.POSIXct(\"2018-01-01\"),     as.POSIXct(\"2019-01-01\"),     length = 26   ),   stringsAsFactors = FALSE ) str(x) #> 'data.frame':    26 obs. of  6 variables: #>  $ x        : chr  \"V\" \"U\" \"Z\" \"W\" ... #>  $ y        : Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 NA NA 1 NA 2 1 NA 1 ... #>  $ z        : int  NA 1 2 3 4 5 6 7 8 9 ... #>  $ abc      : num  -0.382 -0.42 -0.917 0.387 -0.992 ... #>  $ def      : logi  TRUE FALSE NA FALSE NA NA ... #>  $ timestamp: POSIXct, format: \"2018-01-01 00:00:00\" \"2018-01-15 14:24:00\" ..."},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"Optimizing Storage for Version Control","text":"critical assumption made git2rdata dataframe contains information. row observation, column variable. dataframe colnames rownames. implies two observations switching place alter information content. switching two variables. Version control systems like git, subversion mercurial focus accurately keeping track change files. Two observations switching place plain text file change, although information content1 doesn’t change. git2rdata helps user prepare plain text files way change version history actual change information content.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"sorting-observations","dir":"Articles","previous_headings":"","what":"Sorting Observations","title":"Optimizing Storage for Version Control","text":"Version control systems often track changes plain text files based row based differences. layman’s terms record lines removed inserted file location. Changing existing line implies removing old version inserting new one. minimal example illustrates . Original version Altered version. row containing 1, 10 moves last line. row containing 3,12 changed 3,0. Diff original altered version. Notice deletion two lines two insertions. Ensuring observations always sorted way thus helps minimizing diff. sorted version altered version looks like example . Diff original sorted alternate version. Notice changes revert actual changes information content. Another benefit changes easily spotted diff. deletion without insertion next line removed observation. insertion without preceding deletion new observation. deletion followed insertion updated observation. sorting argument comes play. argument provided writing file first time, yield warning lack sorting. write_vc() writes observations current order. New versions file apply sorting either, leaving burden user. changed hash data file illustrates example . metadata hash remains . sorting contain vector variable names. observations automatically sorted along variables. Now get error set sorting variables changed. metadata stores set sorting variables. Changing sorting can potentially lead large diffs, git2rdata tries avoid much possible. moment store output write_vc() object reduce output. Using strict = FALSE turns errors warnings allows update file. Notice get new warning: variable used sorting resulted ties, thus order observations guaranteed stable. solution use different variables. ’ll need strict = FALSE override change sorting variables. defined sorting, may omit sorting argument writing new versions. write_vc uses sorting defined existing metadata. checks potential ties. Ties results warning.","code":"A,B 1,10 2,11 3,12 A,B 2,11 3,0 1,10 A,B -1,10 2,11 -3,12 +3,0 +1,10 A,B 1,10 2,11 3,0 A,B 1,10 2,11 -3,12 +3,0 library(git2rdata) write_vc(x, file = \"row_order\", root = root) #> Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, : #> `digits` was not set. Setting is automatically to 6. See ?meta #> Warning: No sorting applied. #> Sorting is strongly recommended in combination with version control. #> 2b0ac8243ca27ed3d983ba8fc27a3bca7ca8f39d 79e04b2ecff2c1eac8ededc69ba09311f38f74da  #>                          \"row_order.tsv\"                          \"row_order.yml\" write_vc(x[sample(nrow(x)), ], file = \"row_order\", root = root) #> Warning: No sorting applied. #> Sorting is strongly recommended in combination with version control. #> 8b6ba8f35315ad27871c5e4725d2430089ba0942 79e04b2ecff2c1eac8ededc69ba09311f38f74da  #>                          \"row_order.tsv\"                          \"row_order.yml\" fn <- write_vc(x, \"row_order\", root, sorting = \"y\") #> Warning: Sorting on 'y' results in ties. #> Add extra sorting variables to ensure small diffs. #> Error: The data was not overwritten because of the issues below. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - The sorting variables changed. #>     - Sorting for the new data: 'y'. #>     - Sorting for the old data: . fn <- write_vc(x, \"row_order\", root, sorting = \"y\", strict = FALSE) #> Warning: Sorting on 'y' results in ties. #> Add extra sorting variables to ensure small diffs. #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - The sorting variables changed. #>     - Sorting for the new data: 'y'. #>     - Sorting for the old data: . fn <- write_vc(x, \"row_order\", root, sorting = c(\"y\", \"x\"), strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - The sorting variables changed. #>     - Sorting for the new data: 'y', 'x'. #>     - Sorting for the old data: 'y'. print_file <- function(file, root, n = -1) {   fn <- file.path(root, file)   data <- readLines(fn, n = n)   cat(data, sep = \"\\n\") } print_file(\"row_order.yml\", root, 7) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: #>   - 'y' #>   - x fn <- write_vc(x[sample(nrow(x)), ], \"row_order\", root) fn <- write_vc(x[sample(nrow(x)), ], \"row_order\", root, sorting = c(\"y\", \"x\")) fn <- write_vc(x[sample(nrow(x), replace = TRUE), ], \"row_order\", root) #> Warning: Sorting on 'y', 'x' results in ties. #> Add extra sorting variables to ensure small diffs."},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"sorting-variables","dir":"Articles","previous_headings":"","what":"Sorting Variables","title":"Optimizing Storage for Version Control","text":"order variables (columns) even bigger impact row based diff. Let’s revisit minimal example. Suppose swap B original example. new data looks . resulting diff maximal every single row changed. Yet none information changed. Hence, maintaining column order crucial storing dataframes plain text files version control. vignette(\"efficiency\", package = \"git2rdata\") vignette illustrates realistic data set. write_vc() writes dataframe first time, stores original order columns metadata. moment , write_vc() uses order stored metadata. example writes data set twice. second version contains identical information randomizes order observations columns. sorting internals write_vc() undo randomization, resulting unchanged file.","code":"B,A 10,1 11,2 13,3 -A,B +B,A -1,10 +10,1 -2,11 +11,2 -3,13 +13,3 write_vc(x, \"column_order\", root, sorting = c(\"x\", \"abc\")) #> Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, : #> `digits` was not set. Setting is automatically to 6. See ?meta #> a9dcf3e5c2c2b820683c66de8e97c70826218670 0d8985d9b4bb134b5381581f854c51447f8c9300  #>                       \"column_order.tsv\"                       \"column_order.yml\" print_file(\"column_order.tsv\", root, n = 5) #> x    y   z   abc def timestamp #> A    1   18  0.572193    0   1537470720 #> B    2   14  -1.64221    0   1532424960 #> C    NA  5   0.0228714   NA  1521072000 #> D    2   20  -0.683184   NA  1539993600 write_vc(x[sample(nrow(x)), sample(ncol(x))], \"column_order\", root) #> a9dcf3e5c2c2b820683c66de8e97c70826218670 0d8985d9b4bb134b5381581f854c51447f8c9300  #>                       \"column_order.tsv\"                       \"column_order.yml\" print_file(\"column_order.tsv\", root, n = 5) #> x    y   z   abc def timestamp #> A    1   18  0.572193    0   1537470720 #> B    2   14  -1.64221    0   1532424960 #> C    NA  5   0.0228714   NA  1521072000 #> D    2   20  -0.683184   NA  1539993600"},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"handling-factors-optimized","dir":"Articles","previous_headings":"","what":"Handling Factors Optimized","title":"Optimizing Storage for Version Control","text":"vignette(\"plain_text\", package = \"git2rdata\") vignette(\"efficiency\", package = \"git2rdata\") illustrate can store factor efficiently storing index data file indices labels metadata. take even bit : happens new data arrives need extra factor level? Let’s add observation new factor level. store updated dataframe new file, see indices different. factor level \"blue\" remains unchanged, \"red\" becomes third level get index 3 instead index 2. lead large diff whereas potential semantics (thus information content) changed. try overwrite original data updated version, get error change factor levels / indices. specific case, decided change OK force writing setting strict = FALSE. Notice original labels (\"blue\" \"red\") keep index, new level (\"green\") gets first available index number. next example removes \"blue\" level switches order remaining levels. Notice meta data retains existing indices. order labels indices reflects new ordering. Changing factor ordered factor vice versa also keep existing level indices.","code":"old <- data.frame(color = c(\"red\", \"blue\"), stringsAsFactors = TRUE) write_vc(old, \"factor\", root, sorting = \"color\") #> ade0e1d70155140e5115f71efae4b15b27287b37 03c3898451e17cf436da59dd0e712606ea63a838  #>                             \"factor.tsv\"                             \"factor.yml\" print_file(\"factor.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: 03c3898451e17cf436da59dd0e712606ea63a838 #>   data_hash: ade0e1d70155140e5115f71efae4b15b27287b37 #> color: #>   class: factor #>   labels: #>   - blue #>   - red #>   index: #>   - 1 #>   - 2 #>   ordered: no updated <- data.frame(   color = c(\"red\", \"green\", \"blue\"),   stringsAsFactors = TRUE ) write_vc(updated, \"factor2\", root, sorting = \"color\") #> 74f0f3c72a5041344924bed321efedf45f5c5250 f2cc274714fef0b55e17ae432e99b73e5c880e2d  #>                            \"factor2.tsv\"                            \"factor2.yml\" print_file(\"factor2.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: f2cc274714fef0b55e17ae432e99b73e5c880e2d #>   data_hash: 74f0f3c72a5041344924bed321efedf45f5c5250 #> color: #>   class: factor #>   labels: #>   - blue #>   - green #>   - red #>   index: #>   - 1 #>   - 2 #>   - 3 #>   ordered: no write_vc(updated, \"factor\", root) #> Error: The data was not overwritten because of the issues below. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - New factor labels for 'color'. #> - New indices for 'color'. fn <- write_vc(updated, \"factor\", root, strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - New factor labels for 'color'. #> - New indices for 'color'. print_file(\"factor.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: e0ed4c773b2179346042fef6f8c22c42c22a7c00 #>   data_hash: bf0c9f17b88b2e8768abc914349bb32e86503654 #> color: #>   class: factor #>   labels: #>   - blue #>   - green #>   - red #>   index: #>   - 1 #>   - 3 #>   - 2 #>   ordered: no deleted <- data.frame(   color = factor(c(\"red\", \"green\"), levels = c(\"red\", \"green\")) ) write_vc(deleted, \"factor\", root, sorting = \"color\", strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - New factor labels for 'color'. #> - New indices for 'color'. #> 1d15f9b5c154535e2e7d2d5cb5619af7da41a066 3cadfe4021fe5e2990d0bb057100c608e3b602fa  #>                             \"factor.tsv\"                             \"factor.yml\" print_file(\"factor.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: 3cadfe4021fe5e2990d0bb057100c608e3b602fa #>   data_hash: 1d15f9b5c154535e2e7d2d5cb5619af7da41a066 #> color: #>   class: factor #>   labels: #>   - red #>   - green #>   index: #>   - 2 #>   - 3 #>   ordered: no ordered <- data.frame(   color = factor(c(\"red\", \"green\"), levels = c(\"red\", \"green\"), ordered = TRUE) ) write_vc(ordered, \"factor\", root, sorting = \"color\", strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - 'color' changes from nominal to ordinal. #> 1d15f9b5c154535e2e7d2d5cb5619af7da41a066 57ff604596058d60e97fbb9c93ee6869f32c1850  #>                             \"factor.tsv\"                             \"factor.yml\" print_file(\"factor.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: 57ff604596058d60e97fbb9c93ee6869f32c1850 #>   data_hash: 1d15f9b5c154535e2e7d2d5cb5619af7da41a066 #> color: #>   class: factor #>   labels: #>   - red #>   - green #>   index: #>   - 2 #>   - 3 #>   ordered: yes"},{"path":"https://ropensci.github.io/git2rdata/articles/version_control.html","id":"relabelling-a-factor","dir":"Articles","previous_headings":"","what":"Relabelling a Factor","title":"Optimizing Storage for Version Control","text":"example store dataframe, relabel factor levels store using write_vc(). Notice update labels indices. Hence creating large diff, updating labels . created relabel(), changes labels meta data maintaining indices. takes three arguments: name data file, root change. change accepts two formats, list dataframe. name list must match variable name factor data. element list must named vector, name existing label value new label. dataframe format requires factor, old new variable one row change label. caveat: relabel() make sense data file uses verbose storage. verbose mode stores factor labels indices, case relabelling label always yield large diff. Hence, relabel() requires optimized storage.","code":"write_vc(old, \"write_vc\", root, sorting = \"color\") #> ade0e1d70155140e5115f71efae4b15b27287b37 03c3898451e17cf436da59dd0e712606ea63a838  #>                           \"write_vc.tsv\"                           \"write_vc.yml\" print_file(\"write_vc.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: 03c3898451e17cf436da59dd0e712606ea63a838 #>   data_hash: ade0e1d70155140e5115f71efae4b15b27287b37 #> color: #>   class: factor #>   labels: #>   - blue #>   - red #>   index: #>   - 1 #>   - 2 #>   ordered: no relabeled <- old # translate the color names to Dutch levels(relabeled$color) <- c(\"blauw\", \"rood\") write_vc(relabeled, \"write_vc\", root, strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - New factor labels for 'color'. #> - New indices for 'color'. #> bcf85634c3b33377842b37e4d21c3546f7572055 f6730454185caeb173c6883ce56200c376975567  #>                           \"write_vc.tsv\"                           \"write_vc.yml\" print_file(\"write_vc.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: f6730454185caeb173c6883ce56200c376975567 #>   data_hash: bcf85634c3b33377842b37e4d21c3546f7572055 #> color: #>   class: factor #>   labels: #>   - blauw #>   - rood #>   index: #>   - 3 #>   - 4 #>   ordered: no write_vc(old, \"relabel\", root, sorting = \"color\") #> ade0e1d70155140e5115f71efae4b15b27287b37 03c3898451e17cf436da59dd0e712606ea63a838  #>                            \"relabel.tsv\"                            \"relabel.yml\" relabel(\"relabel\", root, change = list(color = c(red = \"rood\", blue = \"blauw\"))) print_file(\"relabel.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: bb25c6cc455f6d8e52b7daeb176adf83d8c5b0f9 #>   data_hash: ade0e1d70155140e5115f71efae4b15b27287b37 #> color: #>   class: factor #>   labels: #>   - blauw #>   - rood #>   index: #>   - 1 #>   - 2 #>   ordered: no relabel(   \"relabel\", root,   change = data.frame(     factor = \"color\", old = \"blauw\", new = \"blue\", stringsAsFactors = TRUE   ) ) print_file(\"relabel.yml\", root) #> ..generic: #>   git2rdata: 0.5.0 #>   optimize: yes #>   NA string: NA #>   sorting: color #>   hash: a4050f89a749abce203ae6e1fe6b41483d385c2d #>   data_hash: ade0e1d70155140e5115f71efae4b15b27287b37 #> color: #>   class: factor #>   labels: #>   - blue #>   - rood #>   index: #>   - 1 #>   - 2 #>   ordered: no"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"vignette describes suggested workflow storing snapshot dataframes git2rdata objects version control. workflow comes two flavours: single repository holding data analysis code. single repository set-simple. single reference (e.g. commit) points data code. One repository holding data second repository holding code. data code independent history two repository set-. Documenting analysis requires one reference repository. set-useful repeating analysis (stable code) updated data. vignette use git2r::repository() object root. adds git functionality write_vc() read_vc(), provided git2r package. allows pull, stage, commit push within R. commit data git repository describes complete snapshot data time commit. difference two commits can consist changes existing git2rdata object (updated observations, new observations, deleted observations updated metadata). Besides updating existing git2rdata objects, can also add new git2rdata objects remove existing ones. need track higher level addition deletions well. illustrate workflow mock analysis datasets::beaver1 datasets::beaver2 datasets.","code":""},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"start initializing git repository. git2rdata assumes already done. ’ll use git2r functions . start creating local bare repository. practice use remote external server (GitHub, Gitlab, Bitbucket, …). example creates local git repository upstream git repository. workflow create similar structure fine.","code":"# initialize a bare git repo to be used as remote remote <- tempfile(\"git2rdata-workflow-remote\") remote <- normalizePath(remote, winslash = \"/\") #> Warning in normalizePath(remote, winslash = \"/\"): #> path[1]=\"/tmp/Rtmp7pIPw6/git2rdata-workflow-remote16f53e7fdd19\": No such file #> or directory dir.create(remote) git2r::init(remote, bare = TRUE) #> Head:     nothing commited (yet)  # initialize a local git repo path <- tempfile(\"git2rdata-workflow\") path <- normalizePath(path, winslash = \"/\") #> Warning in normalizePath(path, winslash = \"/\"): #> path[1]=\"/tmp/Rtmp7pIPw6/git2rdata-workflow16f5285f022a\": No such file or #> directory dir.create(path) init_repo <- git2r::clone(remote, path, progress = FALSE) git2r::config(init_repo, user.name = \"me\", user.email = \"me@me.com\") # add an initial commit with .gitignore file writeLines(\"*extra*\", file.path(path, \".gitignore\")) git2r::add(init_repo, \".gitignore\", force = TRUE) git2r::commit(init_repo, message = \"Initial commit\") #> [fb0fa6b] 2025-01-24: Initial commit # push initial commit to remote branch_name <- git2r::branches(init_repo)[[1]]$name git2r::push(   init_repo, \"origin\", file.path(\"refs\", \"heads\", branch_name, fsep = \"/\") ) rm(init_repo)"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"structuring-git2rdata-objects-within-a-project","dir":"Articles","previous_headings":"","what":"Structuring Git2rdata Objects Within a Project","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"git2rdata imposes minimal structure. .tsv .yml file need folder. ’s . sake simplicity, vignette dump git2rdata objects root repository. might good idea real project. recommend use least different directory tree import script. directory can go root data repository. goes data directory case data code repository. inst directory case R package. project might need different directory structure. Feel free choose relevant data structure project.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"first-commit","dir":"Articles","previous_headings":"Storing Dataframes ad Hoc into a Git Repository","what":"First Commit","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"first commit use datasets::beaver1. connect git repository using repository(). Note assumes path existing git repository. Now can write dataset git2rdata object repository. root argument write_vc() git_repository, gains two extra arguments: stage force. Setting stage = TRUE, automatically stage files written write_vc(). can use status() check write_vc() wrote staged required files. commit() changes.","code":"library(git2rdata) repo <- repository(path) fn <- write_vc(beaver1, \"beaver\", repo, sorting = \"time\", stage = TRUE) #> Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, #> : `digits` was not set. Setting is automatically to 6. See ?meta status(repo) #> Staged changes: #>  New:        beaver.tsv #>  New:        beaver.yml cm1 <- commit(repo, message = \"First commit\") cat(cm1$message) #> First commit"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"second-commit","dir":"Articles","previous_headings":"Storing Dataframes ad Hoc into a Git Repository","what":"Second Commit","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"second commit adds beaver2. Notice extra_beaver listed status(), although write_vc() wrote repository. reason set .gitignore contains \"*extra*, git ignores git2rdata object name containing “extra”. force git stage setting force = TRUE.","code":"fn <- write_vc(beaver2, \"extra_beaver\", repo, sorting = \"time\", stage = TRUE) #> Warning in meta.data.frame(x, optimize = optimize, na = na, sorting = sorting, #> : `digits` was not set. Setting is automatically to 6. See ?meta status(repo) #> working directory clean status(repo, ignored = TRUE) #> Ignored files: #>  Ignored:    extra_beaver.tsv #>  Ignored:    extra_beaver.yml fn <- write_vc(beaver2, \"extra_beaver\", repo, sorting = \"time\", stage = TRUE,                force = TRUE) status(repo) #> Staged changes: #>  New:        extra_beaver.tsv #>  New:        extra_beaver.yml cm2 <- commit(repo, message = \"Second commit\")"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"third-commit","dir":"Articles","previous_headings":"Storing Dataframes ad Hoc into a Git Repository","what":"Third Commit","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"Now decide single git2rdata object containing data beavers relevant. add ID variable animals. requires updating sorting avoid ties. strict = FALSE update metadata. “extra_beaver” git2rdata object longer needed remove . use = TRUE stage removal “extra_beaver” committing changes.","code":"beaver1$beaver <- 1 beaver2$beaver <- 2 beaver <- rbind(beaver1, beaver2) fn <- write_vc(beaver, \"beaver\", repo, sorting = c(\"beaver\", \"time\"),                strict = FALSE, stage = TRUE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - The sorting variables changed. #>     - Sorting for the new data: 'beaver', 'time'. #>     - Sorting for the old data: 'time'. #> - New data has a different number of variables. #> - New variables: beaver. file.remove(list.files(path, \"extra\", full.names = TRUE)) #> [1] TRUE TRUE status(repo) #> Unstaged changes: #>  Deleted:    extra_beaver.tsv #>  Deleted:    extra_beaver.yml #>  #> Staged changes: #>  Modified:   beaver.tsv #>  Modified:   beaver.yml cm3 <- commit(repo, message = \"Third commit\", all = TRUE) status(repo) #> working directory clean"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"scripted-workflow-for-storing-dataframes","dir":"Articles","previous_headings":"","what":"Scripted Workflow for Storing Dataframes","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"strongly recommend add git2rdata object import script instead adding ad hoc. Store script (analysis) repository. documents creation git2rdata objects. Rerun script whenever updated data becomes available. Old versions import script associated git2rdata remain available version control history. Remove obsolete git2rdata objects import script. keeps import script working directory tidy minimal. Basically, import script create git2rdata objects within given directory tree. gives advantage start import script clearing existing git2rdata object directory. import script longer creates git2rdata object, gets removed without need track git2rdata objects existed previous version. brute force method removing files .tsv / .yml pairs good idea. removes existing metadata need efficient storage (see vignette(\"efficiency\", package = \"git2rdata\")). better solution use rm_data() directory start import script. removes .tsv files valid metadata. existing metadata remains untouched point. write git2rdata objects stage . Unchanged objects lead diff, even first deleted recreated . script won’t recreate .tsv file obsolete git2rdata objects. Use prune_meta() remove leftover metadata files. Commit push changes end script. example script recreating “beaver” git2rdata object third commit.","code":"# load package library(git2rdata) # step 1: setup the repository and data path repo <- repository(\".\") data_path <- file.path(\"data\", \"beaver\") # step 1b: sync the repository with the remote pull(repo = repo) # step 2: remove all existing data files rm_data(root = repo, path = data_path, stage = TRUE)  # step 3: write all relevant git2rdata objects to the data path beaver1$beaver <- 1 beaver2$beaver <- 2 body_temp <- rbind(beaver1, beaver2) fn <- write_vc(x = body_temp, file = file.path(data_path, \"body_temperature\"),                root = repo, sorting = c(\"beaver\", \"time\"), stage = TRUE)  # step 4: remove any dangling metadata files prune_meta(root = repo, path = data_path, stage = TRUE)  # step 5: commit the changes cm <- commit(repo = repo, message = \"import\") # step 5b: sync the repository with the remote push(repo = repo)"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"r-package-workflow-for-storing-dataframes","dir":"Articles","previous_headings":"","what":"R Package Workflow for Storing Dataframes","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"recommend two repository set-case recurring analyses. relative stable analyses run frequency updated data (e.g. month). makes worthwhile convert analyses R package. Split long scripts set shorter functions much easier document maintain. R package offers lots functionality box check quality code. example converts import script function. illustrate can use Roxygen2 (see vignette(\"roxygen2\", package = \"roxygen2\")) tags document function list dependencies. Note added session = TRUE commit(). append sessionInfo() time commit commit message. Thus documenting loaded R packages version. documents code used create git2rdata object since analysis code resides dedicated package version number. strongly recommend run import fresh R session. sessionInfo() commit time contains packages strictly required import. Consider running import command line. e.g. Rscript -e 'mypackage::import_body_temp(\"path//root\")'.","code":"#' Import the beaver body temperature data #' @param path the root of the git repository #' @importFrom git2rdata repository pull rm_data write_vc prune_meta commit push #' @export import_body_temp <- function(path) {   # step 1: setup the repository and data path   repo <- repository(path)   data_path <- file.path(\"data\", \"beaver\")   # step 1b: sync the repository with the remote   pull(repo = repo)   # step 2: remove all existing data files   rm_data(root = repo, path = data_path, stage = TRUE)    # step 3: write all relevant git2rdata objects to the data path   beaver1$beaver <- 1   beaver2$beaver <- 2   body_temp <- rbind(beaver1, beaver2)   write_vc(x = body_temp, file = file.path(data_path, \"body_temperature\"),                  root = repo, sorting = c(\"beaver\", \"time\"), stage = TRUE)    # step 4: remove any dangling metadata files   prune_meta(root = repo, path = data_path, stage = TRUE)    # step 5: commit the changes   commit(repo = repo, message = \"import\", session = TRUE)   # step 5b: sync the repository with the remote   push(object = repo) }"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"analysis-workflow-with-reproducible-data","dir":"Articles","previous_headings":"","what":"Analysis Workflow with Reproducible Data","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"example small trivial example standardized analysis documents source data describing name data, repository URL commit. can use information reporting results. makes data underlying results traceable. case can run every analysis looping list datasets repository. dataset: beaver.tsvcommit: 510a3f71f63cbbf0893704a8fe391876691272a0repository: /tmp/Rtmp7pIPw6/git2rdata-workflow-remote16f53e7fdd19 example thing first second commit. dataset: beaver.tsvcommit: b340ee4b109a8ff40f6a0ac8e66d4c82032b56barepository: /tmp/Rtmp7pIPw6/git2rdata-workflow-remote16f53e7fdd19 dataset: beaver.tsvcommit: b340ee4b109a8ff40f6a0ac8e66d4c82032b56barepository: /tmp/Rtmp7pIPw6/git2rdata-workflow-remote16f53e7fdd19 dataset: extra_beaver.tsvcommit: a36f0840ce1f0be4fc5afdfde1325004c6fe603erepository: /tmp/Rtmp7pIPw6/git2rdata-workflow-remote16f53e7fdd19 inspect reported results ’ll notice output (coefficients commit hash) “beaver” object identical first second commit. makes sense since “beaver” object didn’t change second commit. output current (third) commit different dataset changed.","code":"analysis <- function(ds_name, repo) {   ds <- read_vc(ds_name, repo)   list(     dataset = ds_name,     repository = git2r::remote_url(repo),     commit = recent_commit(ds_name, repo, data = TRUE),     model = lm(temp ~ activ, data = ds)   ) } report <- function(x) {   knitr::kable(     coef(summary(x$model)),     caption = sprintf(\"**dataset:** %s  \\n**commit:** %s  \\n**repository:** %s\",                       x$dataset, x$commit$commit, x$repository)   ) } repo <- repository(path) current <- lapply(list_data(repo), analysis, repo = repo) names(current) <- list_data(repo) result <- lapply(current, report) junk <- lapply(result, print) # checkout first commit git2r::checkout(cm1) # do analysis previous <- lapply(list_data(repo), analysis, repo = repo) names(previous) <- list_data(repo) result <- lapply(previous, report) junk <- lapply(result, print) # checkout second commit git2r::checkout(cm2) # do analysis previous <- lapply(list_data(repo), analysis, repo = repo) names(previous) <- list_data(repo) result <- lapply(previous, report) junk <- lapply(result, print)"},{"path":"https://ropensci.github.io/git2rdata/articles/workflow.html","id":"long-running-analysis","dir":"Articles","previous_headings":"Analysis Workflow with Reproducible Data","what":"Long running analysis","title":"Suggested Workflow for Storing a Variable Set of Dataframes under Version Control","text":"Imagine case individual analysis takes run. store recent version analysis add information recent_commit(). preparing analysis, can run recent_commit() dataset compare commit hash one available analysis. commit hashes match, data hasn’t changed. need rerun analysis1, saving valuable computing resources time.","code":""},{"path":"https://ropensci.github.io/git2rdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thierry Onkelinx. Author, maintainer.            Research Institute Nature Forest (INBO) Floris Vanderhaeghe. Contributor.            Research Institute Nature Forest (INBO) Peter Desmet. Contributor.            Research Institute Nature Forest (INBO) Els Lommelen. Contributor.            Research Institute Nature Forest (INBO) . Copyright holder, funder.","code":""},{"path":"https://ropensci.github.io/git2rdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Onkelinx, Thierry (2025) git2rdata: Store Retrieve Data.frames Git Repository. Version 0.5.0. https://ropensci.github.io/git2rdata/","code":"@Manual{,   title = {git2rdata: Store and Retrieve Data.frames in a Git Repository. Version 0.5.0},   author = {Thierry Onkelinx},   year = {2025},   url = {https://ropensci.github.io/git2rdata/},   abstract = {The git2rdata package is an R package for writing and reading dataframes as plain text files. A metadata file stores important information. 1) Storing metadata allows to maintain the classes of variables. By default, git2rdata optimizes the data for file storage. The optimization is most effective on data containing factors. The optimization makes the data less human readable. The user can turn this off when they prefer a human readable format over smaller files. Details on the implementation are available in vignette(\"plain_text\", package = \"git2rdata\"). 2) Storing metadata also allows smaller row based diffs between two consecutive commits. This is a useful feature when storing data as plain text files under version control. Details on this part of the implementation are available in vignette(\"version_control\", package = \"git2rdata\"). Although we envisioned git2rdata with a git workflow in mind, you can use it in combination with other version control systems like subversion or mercurial. 3) git2rdata is a useful tool in a reproducible and traceable workflow. vignette(\"workflow\", package = \"git2rdata\") gives a toy example. 4) vignette(\"efficiency\", package = \"git2rdata\") provides some insight into the efficiency of file storage, git repository size and speed for writing and reading.},   keywords = {git; version control; plain text data},   doi = {10.5281/zenodo.1485309}, }"},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"git2rdata-","dir":"","previous_headings":"","what":"Store and Retrieve Data.frames in a Git Repository","title":"Store and Retrieve Data.frames in a Git Repository","text":"Please visit git2rdata website https://ropensci.github.io/git2rdata/. vignette code website link rendered version vignette. Functions link help file.","code":""},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"rationale","dir":"","previous_headings":"","what":"Rationale","title":"Store and Retrieve Data.frames in a Git Repository","text":"git2rdata package R package writing reading dataframes plain text files. metadata file stores important information. Storing metadata allows maintain classes variables. default, git2rdata optimizes data file storage. optimization effective data containing factors. optimization makes data less human readable. user can turn prefer human readable format smaller files. Details implementation available vignette(\"plain_text\", package = \"git2rdata\"). Storing metadata also allows smaller row based diffs two consecutive commits. useful feature storing data plain text files version control. Details part implementation available vignette(\"version_control\", package = \"git2rdata\"). Although envisioned git2rdata git workflow mind, can use combination version control systems like subversion mercurial. git2rdata useful tool reproducible traceable workflow. vignette(\"workflow\", package = \"git2rdata\") gives toy example. vignette(\"efficiency\", package = \"git2rdata\") provides insight efficiency file storage, git repository size speed writing reading.","code":""},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"why-use-git2rdata","dir":"","previous_headings":"","what":"Why Use Git2rdata?","title":"Store and Retrieve Data.frames in a Git Repository","text":"can store dataframes plain text files. changes data type. Factors keep original levels, including order. Date date-time format unambiguous, documented metadata. data metadata standard open format, making readable software. git2rdata checks data metadata reading. read_vc() informs user tampering data metadata. Another option using git2rdata solely writing disk handle plain text files favourite version control system outside R. optimization reduces required disk space 30% working directory git history. Reading data HDD 30% faster read.table(), writing HDD takes 70% time write.table(). Git2rdata useful tool reproducible traceable workflow. See vignette(\"workflow\", package = \"git2rdata\"). can detect file last modified git history. Use check whether existing analysis obsolete due new data. allows rerun date analyses, saving resources.","code":""},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"talk-about-git2rdata-at","dir":"","previous_headings":"","what":"Talk About git2rdata at","title":"Store and Retrieve Data.frames in a Git Repository","text":"useR!2019 Toulouse, France","code":""},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Store and Retrieve Data.frames in a Git Repository","text":"Install CRAN Install development version GitHub","code":"install.packages(\"git2rdata\") # installation requires the \"remotes\" package # install.package(\"remotes\")  # install with vignettes (recommended) remotes::install_github(   \"ropensci/git2rdata\",    build = TRUE,    dependencies = TRUE,    build_opts = c(\"--no-resave-data\", \"--no-manual\") ) # install without vignettes remotes::install_github(\"ropensci/git2rdata\"))"},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"usage-in-brief","dir":"","previous_headings":"","what":"Usage in Brief","title":"Store and Retrieve Data.frames in a Git Repository","text":"user stores dataframes write_vc() retrieves read_vc(). functions share arguments root file. root refers base location store dataframe. can either point local directory local git repository. file file name use can include path relative root. Make sure relative path stays within root. details store dataframes plain text files vignette(\"plain_text\", package = \"git2rdata\"). Please read vignette(\"version_control\", package = \"git2rdata\") details using git2rdata combination version control.","code":"# using a local directory library(git2rdata) root <- \"~/myproject\"  write_vc(my_data, file = \"rel_path/filename\", root = root) read_vc(file = \"rel_path/filename\", root = root) root <- git2r::repository(\"~/my_git_repo\") # git repository # using a git repository library(git2rdata) repo <- repository(\"~/my_git_repo\") pull(repo) write_vc(my_data, file = \"rel_path/filename\", root = repo, stage = TRUE) commit(repo, \"My message\") push(repo) read_vc(file = \"rel_path/filename\", root = repo)"},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"what-data-sizes-can-git2rdata-handle","dir":"","previous_headings":"","what":"What Data Sizes Can Git2rdata Handle?","title":"Store and Retrieve Data.frames in a Git Repository","text":"recommendation git repositories use files smaller 100 MiB, repository size less 1 GiB less 25k files. individual file size limiting factor. Storing airbag dataset (DAAG::nassCDS) write_vc() requires average 68 (optimized) 97 (verbose) byte per record. file reaches 100 MiB limit data 1.5 million (optimized) 1 million (verbose) observations. Storing 90% random subset airbag dataset requires 370 kiB (optimized) 400 kiB (verbose) storage git history. Updating dataset 90% random subsets requires average 60 kiB (optimized) 100 kiB (verbose) per commit. git history reaches limit 1 GiB 17k (optimized) 10k (verbose) commits. mileage might vary.","code":""},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Store and Retrieve Data.frames in a Git Repository","text":"Please use output citation(\"git2rdata\")","code":""},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"folder-structure","dir":"","previous_headings":"","what":"Folder Structure","title":"Store and Retrieve Data.frames in a Git Repository","text":"R: source scripts R functions documentation Roxygen format man: help files Rd format inst/efficiency: pre-calculated data speed vignette(\"efficiency\", package = \"git2rdata\") testthat: R scripts unit tests using testthat framework vignettes: source code vignettes describing package man-roxygen: templates documentation Roxygen format pkgdown: source files git2rdata website .github: guidelines templates contributors","code":"git2rdata ├── .github ├─┬ inst │ └── efficiency ├── man ├── man-roxygen ├── pkgdown ├── R ├─┬ tests │ └── testthat └── vignettes"},{"path":"https://ropensci.github.io/git2rdata/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Store and Retrieve Data.frames in a Git Repository","text":"git2rdata welcomes contributions. Please read Contributing guidelines first. git2rdata project Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-exported Function From git2r — commit","title":"Re-exported Function From git2r — commit","text":"See commit git2r.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/data_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Data Package for a directory of CSV files — data_package","title":"Create a Data Package for a directory of CSV files — data_package","text":"Create datapackage.json file directory CSV files. function look .csv files directory subdirectories. create datapackage.json file metadata CSV file.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/data_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Data Package for a directory of CSV files — data_package","text":"","code":"data_package(path = \".\")"},{"path":"https://ropensci.github.io/git2rdata/reference/data_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Data Package for a directory of CSV files — data_package","text":"path directory create datapackage.json file.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/display_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Display metadata for a git2rdata object — display_metadata","title":"Display metadata for a git2rdata object — display_metadata","text":"Display metadata git2rdata object","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/display_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display metadata for a git2rdata object — display_metadata","text":"","code":"display_metadata(x, minimal = FALSE)"},{"path":"https://ropensci.github.io/git2rdata/reference/display_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display metadata for a git2rdata object — display_metadata","text":"x git2rdata object minimal logical, TRUE message displayed","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/git2rdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"git2rdata: Store and Retrieve Data.frames in a Git Repository — git2rdata-package","title":"git2rdata: Store and Retrieve Data.frames in a Git Repository — git2rdata-package","text":"git2rdata package R package writing reading dataframes plain text files. metadata file stores important information. 1) Storing metadata allows maintain classes variables. default, git2rdata optimizes data file storage. optimization effective data containing factors. optimization makes data less human readable. user can turn prefer human readable format smaller files. Details implementation available vignette(\"plain_text\", package = \"git2rdata\"). 2) Storing metadata also allows smaller row based diffs two consecutive commits. useful feature storing data plain text files version control. Details part implementation available vignette(\"version_control\", package = \"git2rdata\"). Although envisioned git2rdata git workflow mind, can use combination version control systems like subversion mercurial. 3) git2rdata useful tool reproducible traceable workflow. vignette(\"workflow\", package = \"git2rdata\") gives toy example. 4) vignette(\"efficiency\", package = \"git2rdata\") provides insight efficiency file storage, git repository size speed writing reading.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/git2rdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"git2rdata: Store and Retrieve Data.frames in a Git Repository — git2rdata-package","text":"Maintainer: Thierry Onkelinx thierry.onkelinx@inbo.(ORCID) (Research Institute Nature Forest (INBO)) contributors: Floris Vanderhaeghe floris.vanderhaeghe@inbo.(ORCID) (Research Institute Nature Forest (INBO)) [contributor] Peter Desmet peter.desmet@inbo.(ORCID) (Research Institute Nature Forest (INBO)) [contributor] Els Lommelen els.lommelen@inbo.(ORCID) (Research Institute Nature Forest (INBO)) [contributor] Research Institute Nature Forest (INBO) info@inbo.[copyright holder, funder]","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whether a Git2rdata Object is Valid. — is_git2rdata","title":"Check Whether a Git2rdata Object is Valid. — is_git2rdata","text":"valid git2rdata object valid metadata.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whether a Git2rdata Object is Valid. — is_git2rdata","text":"","code":"is_git2rdata(file, root = \".\", message = c(\"none\", \"warning\", \"error\"))"},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whether a Git2rdata Object is Valid. — is_git2rdata","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). message single value indicating type messages top logical value. \"none\": messages, \"warning\": issue warning case invalid metadata file. \"error\": invalid metadata file results error. Defaults \"none\".","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whether a Git2rdata Object is Valid. — is_git2rdata","text":"logical value. TRUE case valid git2rdata object. Otherwise FALSE.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Whether a Git2rdata Object is Valid. — is_git2rdata","text":"","code":"# create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # store a file write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check the stored file is_git2rmeta(\"iris\", root) #> [1] TRUE is_git2rdata(\"iris\", root) #> [1] TRUE  # Remove the metadata from the existing git2rdata object. Then it stops # being a git2rdata object. junk <- file.remove(file.path(root, \"iris.yml\")) is_git2rmeta(\"iris\", root) #> [1] FALSE is_git2rdata(\"iris\", root) #> [1] FALSE  # recreate the file and remove the data and keep the metadata. It stops being # a git2rdata object, but the metadata remains valid. write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  junk <- file.remove(file.path(root, \"iris.tsv\")) is_git2rmeta(\"iris\", root) #> [1] TRUE is_git2rdata(\"iris\", root) #> [1] FALSE"},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rmeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whether a Git2rdata Object Has Valid Metadata. — is_git2rmeta","title":"Check Whether a Git2rdata Object Has Valid Metadata. — is_git2rmeta","text":"Valid metadata file .yml extension. top level item ..generic. item contains git2rdata (version number), hash (hash metadata) data_hash (hash data file). version number must current version.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rmeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whether a Git2rdata Object Has Valid Metadata. — is_git2rmeta","text":"","code":"is_git2rmeta(file, root = \".\", message = c(\"none\", \"warning\", \"error\"))"},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rmeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whether a Git2rdata Object Has Valid Metadata. — is_git2rmeta","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). message single value indicating type messages top logical value. \"none\": messages, \"warning\": issue warning case invalid metadata file. \"error\": invalid metadata file results error. Defaults \"none\".","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rmeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whether a Git2rdata Object Has Valid Metadata. — is_git2rmeta","text":"logical value. TRUE case valid metadata file. Otherwise FALSE.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/is_git2rmeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Whether a Git2rdata Object Has Valid Metadata. — is_git2rmeta","text":"","code":"# create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # store a file write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check the stored file is_git2rmeta(\"iris\", root) #> [1] TRUE is_git2rdata(\"iris\", root) #> [1] TRUE  # Remove the metadata from the existing git2rdata object. Then it stops # being a git2rdata object. junk <- file.remove(file.path(root, \"iris.yml\")) is_git2rmeta(\"iris\", root) #> [1] FALSE is_git2rdata(\"iris\", root) #> [1] FALSE  # recreate the file and remove the data and keep the metadata. It stops being # a git2rdata object, but the metadata remains valid. write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  junk <- file.remove(file.path(root, \"iris.tsv\")) is_git2rmeta(\"iris\", root) #> [1] TRUE is_git2rdata(\"iris\", root) #> [1] FALSE"},{"path":"https://ropensci.github.io/git2rdata/reference/list_data.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Git2rdata Files Containing Data — list_data","title":"List Available Git2rdata Files Containing Data — list_data","text":"function returns names valid git2rdata objects. implies .tsv files matching valid metadata file (.yml). Invalid metadata files result warning. function ignores valid metadata files without matching raw data (.tsv).","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/list_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Git2rdata Files Containing Data — list_data","text":"","code":"list_data(root = \".\", path = \".\", recursive = TRUE)"},{"path":"https://ropensci.github.io/git2rdata/reference/list_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available Git2rdata Files Containing Data — list_data","text":"root root repository. Either path git-repository path relative path root. Defaults root recursive logical.  listing recurse directories?","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/list_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Git2rdata Files Containing Data — list_data","text":"character vector git2rdata object names, including relative path.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/list_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Git2rdata Files Containing Data — list_data","text":"","code":"## on file system  # create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # store a dataframe as git2rdata object. Capture the result to minimise # screen output junk <- write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta # write a standard tab separate file (non git2rdata object) write.table(iris, file = file.path(root, \"standard.tsv\"), sep = \"\\t\") # write a YAML file yml <- list(   authors = list(    \"Research Institute for Nature and Forest\" = list(        href = \"https://www.inbo.be/en\"))) yaml::write_yaml(yml, file = file.path(root, \"_pkgdown.yml\"))  # list the git2rdata objects list_data(root) #> [1] \"iris.tsv\" # list the files list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"iris.tsv\"     \"iris.yml\"     \"standard.tsv\"  # remove all .tsv files from valid git2rdata objects rm_data(root, path = \".\") # check the removal of the .tsv file list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"iris.yml\"     \"standard.tsv\" list_data(root) #> character(0)  # remove dangling git2rdata metadata files prune_meta(root, path = \".\") #> Warning: Invalid metadata files found. See ?is_git2rmeta(): #> _pkgdown.yml # check the removal of the metadata list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"standard.tsv\" list_data(root) #> character(0)   ## on git repo  # initialise a git repo using git2r repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # store a dataframe write_vc(iris[1:6, ], \"iris\", repo, sorting = \"Sepal.Length\", stage = TRUE) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check that the dataframe is stored status(repo) #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>  list_data(repo) #> [1] \"iris.tsv\"  # commit the current version and check the git repo commit(repo, \"add iris data\", session = TRUE) #> [75188ea] 2025-01-24: add iris data status(repo) #> working directory clean  # remove the data files from the repo rm_data(repo, path = \".\") # check the removal list_data(repo) #> character(0) status(repo) #> Unstaged changes: #> \tDeleted:    iris.tsv #>   # remove dangling metadata prune_meta(repo, path = \".\") # check the removal list_data(repo) #> character(0) status(repo) #> Unstaged changes: #> \tDeleted:    iris.tsv #> \tDeleted:    iris.yml #>"},{"path":"https://ropensci.github.io/git2rdata/reference/meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","title":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","text":"Prepares vector storage. relevant, meta() optimizes object storage changing format one needs less characters. metadata stored meta attribute, contains required information back-transform optimized format original format. case data.frame, meta() applies columns. meta attribute becomes named list containing metadata column plus additional ..generic element. ..generic reserved name metadata allowed column name data.frame. write_vc() uses function prepare dataframe storage. Existing metadata passed optional old argument. argument intended internal use.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","text":"","code":"meta(x, ..., digits)  # S3 method for class 'character' meta(x, na = \"NA\", optimize = TRUE, ...)  # S3 method for class 'factor' meta(x, optimize = TRUE, na = \"NA\", index, strict = TRUE, ...)  # S3 method for class 'logical' meta(x, optimize = TRUE, ...)  # S3 method for class 'POSIXct' meta(x, optimize = TRUE, ...)  # S3 method for class 'Date' meta(x, optimize = TRUE, ...)  # S3 method for class 'data.frame' meta(   x,   optimize = TRUE,   na = \"NA\",   sorting,   strict = TRUE,   split_by = character(0),   ...,   digits )"},{"path":"https://ropensci.github.io/git2rdata/reference/meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","text":"x vector. ... arguments methods. digits number significant digits smallest absolute value. function applies rounding automatically. relevant numeric variables. Either single positive integer named vector names link variables data.frame. Defaults 6 warning. na string use missing values data. optimize TRUE, recode data get smaller text files. FALSE, meta() converts data character. Defaults TRUE. index optional named vector existing factor indices. names must match existing factor levels. Unmatched levels x get new indices. strict metadata changes. strict = FALSE overwrites data metadata warning listing changes, strict = TRUE returns error leaves data metadata . Defaults TRUE. sorting optional vector column names defining columns use sorting x order use . default empty sorting yields warning. Add sorting avoid warning. Strongly recommended combination version control. See vignette(\"efficiency\", package = \"git2rdata\") illustration importance sorting. split_by optional vector variables name split text files. creates separate file every combination. prepend variables vector sorting variables.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","text":"optimized vector x meta attribute.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/meta.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","text":"default order factor levels depends current locale. See Comparison details . code different locale might result different sorting. meta() ignores, warning, change order factor levels. Add strict = FALSE enforce new order factor levels.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize an Object for Storage as Plain Text and Add Metadata — meta","text":"","code":"meta(c(NA, \"'NA'\", '\"NA\"', \"abc\\tdef\", \"abc\\ndef\")) #> [1] \"NA\"             \"'NA'\"           \"\\\"\\\"\\\"NA\\\"\\\"\\\"\" \"\\\"abc\\tdef\\\"\"   #> [5] \"\\\"abc\\ndef\\\"\"   #> attr(,\"meta\") #> class: character #> na_string: NA #>  meta(1:3) #> [1] 1 2 3 #> attr(,\"meta\") #> class: integer #>  meta(seq(1, 3, length = 4), digits = 6) #> [1] 1.00000 1.66667 2.33333 3.00000 #> attr(,\"meta\") #> class: numeric #> digits: 6 #>  meta(factor(c(\"b\", NA, \"NA\"), levels = c(\"NA\", \"b\", \"c\"))) #>    b <NA>   NA  #>    2   NA    1  #> attr(,\"meta\") #> class: factor #> na_string: NA #> optimize: yes #> labels: #> - NA #> - b #> - c #> index: #> - 1 #> - 2 #> - 3 #> ordered: no #>  meta(factor(c(\"b\", NA, \"a\"), levels = c(\"a\", \"b\", \"c\")), optimize = FALSE) #> [1] \"b\"  \"NA\" \"a\"  #> attr(,\"meta\") #> class: factor #> na_string: NA #> optimize: no #> labels: #> - a #> - b #> - c #> index: #> - 1 #> - 2 #> - 3 #> ordered: no #>  meta(factor(c(\"b\", NA, \"a\"), levels = c(\"a\", \"b\", \"c\"), ordered = TRUE)) #>    b <NA>    a  #>    2   NA    1  #> attr(,\"meta\") #> class: factor #> na_string: NA #> optimize: yes #> labels: #> - a #> - b #> - c #> index: #> - 1 #> - 2 #> - 3 #> ordered: yes #>  meta(   factor(c(\"b\", NA, \"a\"), levels = c(\"a\", \"b\", \"c\"), ordered = TRUE),   optimize = FALSE ) #> [1] \"b\"  \"NA\" \"a\"  #> attr(,\"meta\") #> class: factor #> na_string: NA #> optimize: no #> labels: #> - a #> - b #> - c #> index: #> - 1 #> - 2 #> - 3 #> ordered: yes #>  meta(c(FALSE, NA, TRUE)) #> [1]  0 NA  1 #> attr(,\"meta\") #> class: logical #> optimize: yes #>  meta(c(FALSE, NA, TRUE), optimize = FALSE) #> [1] FALSE    NA  TRUE #> attr(,\"meta\") #> class: logical #> optimize: no #>  meta(complex(real = c(1, NA, 2), imaginary = c(3, NA, -1))) #> [1] 1+3i   NA 2-1i #> attr(,\"meta\") #> class: complex #>  meta(as.POSIXct(\"2019-02-01 10:59:59\", tz = \"CET\")) #> [1] 1549015199 #> attr(,\"tzone\") #> [1] \"CET\" #> attr(,\"meta\") #> class: POSIXct #> optimize: yes #> origin: 1970-01-01 00:00:00 #> timezone: UTC #>  meta(as.POSIXct(\"2019-02-01 10:59:59\", tz = \"CET\"), optimize = FALSE) #> [1] \"2019-02-01T09:59:59Z\" #> attr(,\"meta\") #> class: POSIXct #> optimize: no #> format: '%Y-%m-%dT%H:%M:%SZ' #> timezone: UTC #>  meta(as.Date(\"2019-02-01\")) #> [1] 17928 #> attr(,\"meta\") #> class: Date #> optimize: yes #> origin: '1970-01-01' #>  meta(as.Date(\"2019-02-01\"), optimize = FALSE) #> [1] \"2019-02-01\" #> attr(,\"meta\") #> class: Date #> optimize: no #> format: '%Y-%m-%d' #>"},{"path":"https://ropensci.github.io/git2rdata/reference/print.git2rdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for git2rdata objects. — print.git2rdata","title":"Print method for git2rdata objects. — print.git2rdata","text":"Prints data description columns available.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/print.git2rdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for git2rdata objects. — print.git2rdata","text":"","code":"# S3 method for class 'git2rdata' print(x, ...)"},{"path":"https://ropensci.github.io/git2rdata/reference/print.git2rdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for git2rdata objects. — print.git2rdata","text":"x git2rdata object ... additional arguments passed print","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/prune_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune Metadata Files — prune_meta","title":"Prune Metadata Files — prune_meta","text":"Removes valid metadata (.yml files) path accompanying data (.tsv file). Invalid metadata triggers warning without removing metadata file. Use function caution since remove valid metadata files without asking confirmation. strongly recommend use function files version control. See vignette(\"workflow\", package = \"git2rdata\") examples use .","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/prune_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune Metadata Files — prune_meta","text":"","code":"prune_meta(root = \".\", path = NULL, recursive = TRUE, ...)  # S3 method for class 'git_repository' prune_meta(root, path = NULL, recursive = TRUE, ..., stage = FALSE)"},{"path":"https://ropensci.github.io/git2rdata/reference/prune_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune Metadata Files — prune_meta","text":"root root project. Can file path git-repository. Defaults current working directory (\".\"). path directory clean data files. directory relative root. recursive remove files subdirectories . ... parameters used methods stage stage changes removing files. Defaults FALSE.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/prune_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune Metadata Files — prune_meta","text":"returns invisibly vector removed files names. paths relative root.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/prune_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prune Metadata Files — prune_meta","text":"","code":"## on file system  # create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # store a dataframe as git2rdata object. Capture the result to minimise # screen output junk <- write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta # write a standard tab separate file (non git2rdata object) write.table(iris, file = file.path(root, \"standard.tsv\"), sep = \"\\t\") # write a YAML file yml <- list(   authors = list(    \"Research Institute for Nature and Forest\" = list(        href = \"https://www.inbo.be/en\"))) yaml::write_yaml(yml, file = file.path(root, \"_pkgdown.yml\"))  # list the git2rdata objects list_data(root) #> [1] \"iris.tsv\" # list the files list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"iris.tsv\"     \"iris.yml\"     \"standard.tsv\"  # remove all .tsv files from valid git2rdata objects rm_data(root, path = \".\") # check the removal of the .tsv file list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"iris.yml\"     \"standard.tsv\" list_data(root) #> character(0)  # remove dangling git2rdata metadata files prune_meta(root, path = \".\") #> Warning: Invalid metadata files found. See ?is_git2rmeta(): #> _pkgdown.yml # check the removal of the metadata list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"standard.tsv\" list_data(root) #> character(0)   ## on git repo  # initialise a git repo using git2r repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # store a dataframe write_vc(iris[1:6, ], \"iris\", repo, sorting = \"Sepal.Length\", stage = TRUE) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check that the dataframe is stored status(repo) #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>  list_data(repo) #> [1] \"iris.tsv\"  # commit the current version and check the git repo commit(repo, \"add iris data\", session = TRUE) #> [75188ea] 2025-01-24: add iris data status(repo) #> working directory clean  # remove the data files from the repo rm_data(repo, path = \".\") # check the removal list_data(repo) #> character(0) status(repo) #> Unstaged changes: #> \tDeleted:    iris.tsv #>   # remove dangling metadata prune_meta(repo, path = \".\") # check the removal list_data(repo) #> character(0) status(repo) #> Unstaged changes: #> \tDeleted:    iris.tsv #> \tDeleted:    iris.yml #>"},{"path":"https://ropensci.github.io/git2rdata/reference/pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-exported Function From git2r — pull","title":"Re-exported Function From git2r — pull","text":"See pull git2r.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/push.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-exported Function From git2r — push","title":"Re-exported Function From git2r — push","text":"See push  git2r.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/read_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Git2rdata Object from Disk — read_vc","title":"Read a Git2rdata Object from Disk — read_vc","text":"read_vc() handles git2rdata objects stored write_vc(). reads verifies metadata file (.yml). reads verifies raw data. last step back-transforming transformation done meta() return data.frame stored write_vc(). read_vc() S3 generic root currently handles \"character\" (path) \"git-repository\" (git2r). S3 methods version control system added.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/read_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Git2rdata Object from Disk — read_vc","text":"","code":"read_vc(file, root = \".\")"},{"path":"https://ropensci.github.io/git2rdata/reference/read_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Git2rdata Object from Disk — read_vc","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\").","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/read_vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Git2rdata Object from Disk — read_vc","text":"data.frame file names hashes attributes. additional class \"git2rdata\" support extra methods display descriptions.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/read_vc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Git2rdata Object from Disk — read_vc","text":"","code":"## on file system  # create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # write a dataframe to the directory write_vc(   iris[1:6, ], file = \"iris\", root = root, sorting = \"Sepal.Length\",   digits = 6 ) #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check that a data file (.tsv) and a metadata file (.yml) exist. list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # read the git2rdata object from the directory read_vc(\"iris\", root) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.6         3.1          1.5         0.2  setosa #> 2          4.7         3.2          1.3         0.2  setosa #> 3          4.9         3.0          1.4         0.2  setosa #> 4          5.0         3.6          1.4         0.2  setosa #> 5          5.1         3.5          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  #> Use `display_metadata()` to view the metadata.  # store a new version with different observations but the same metadata write_vc(iris[1:5, ], \"iris\", root) #> 31ff841b58e569e8a4a4ac2f02152295c19f94db  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # Removing a column requires version requires new metadata. # Add strict = FALSE to override the existing metadata. write_vc(   iris[1:6, -2], \"iris\", root, sorting = \"Sepal.Length\", strict = FALSE ) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - New data has a different number of variables. #> - Deleted variables: Sepal.Width. #> b2098d507b0d749a86bb61a185ab2d31f7622418  #>                               \"iris.tsv\"  #> 08179205a52ffe296818ef844180093eaaadfe00  #>                               \"iris.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # storing the orignal version again requires another update of the metadata write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Width\", strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - The sorting variables changed. #>     - Sorting for the new data: 'Sepal.Width'. #>     - Sorting for the old data: 'Sepal.Length'. #> - New data has a different number of variables. #> - New variables: Sepal.Width. #> 4045436d3a61801f4eaad5769e32726838deecbc  #>                               \"iris.tsv\"  #> 4e0919ca66a485cf0e198981782f3cd122d10fef  #>                               \"iris.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # optimize = FALSE stores the data more verbose. This requires larger files. write_vc(   iris[1:6, ], \"iris2\", root, sorting = \"Sepal.Width\", optimize = FALSE ) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 79547bc5fecc2c82bd01988d1591130e578fdcf9  #>                              \"iris2.csv\"  #> 4f86db2012b3267f1a50131945158aead6d918ec  #>                              \"iris2.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\"  \"iris.yml\"  \"iris2.csv\" \"iris2.yml\"    ## on git repo using a git2r::git-repository  # initialise a git repo using the git2r package repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # store a dataframe in git repo. write_vc(iris[1:6, ], file = \"iris\", root = repo, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # This git2rdata object is not staged by default. status(repo) #> Untracked files: #> \tUntracked:  iris.tsv #> \tUntracked:  iris.yml #>  # read a dataframe from a git repo read_vc(\"iris\", repo) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.6         3.1          1.5         0.2  setosa #> 2          4.7         3.2          1.3         0.2  setosa #> 3          4.9         3.0          1.4         0.2  setosa #> 4          5.0         3.6          1.4         0.2  setosa #> 5          5.1         3.5          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  #> Use `display_metadata()` to view the metadata.  # store a new version in the git repo and stage it in one go write_vc(iris[1:5, ], \"iris\", repo, stage = TRUE) #> 31ff841b58e569e8a4a4ac2f02152295c19f94db  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  status(repo) #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>   # store a verbose version in a different gir2data object write_vc(   iris[1:6, ], \"iris2\", repo, sorting = \"Sepal.Width\", optimize = FALSE ) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 79547bc5fecc2c82bd01988d1591130e578fdcf9  #>                              \"iris2.csv\"  #> 4f86db2012b3267f1a50131945158aead6d918ec  #>                              \"iris2.yml\"  status(repo) #> Untracked files: #> \tUntracked:  iris2.csv #> \tUntracked:  iris2.yml #>  #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>"},{"path":"https://ropensci.github.io/git2rdata/reference/recent_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the Most Recent File Change — recent_commit","title":"Retrieve the Most Recent File Change — recent_commit","text":"Retrieve recent commit added updated file git2rdata object. imply file still exists current HEAD ignores deletion files. Use information document current version file git2rdata object analysis. Since refers recent change file, remains unchanged committing changes files. can also use track data got updated, requiring analysis rerun. See vignette(\"workflow\", package = \"git2rdata\").","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/recent_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the Most Recent File Change — recent_commit","text":"","code":"recent_commit(file, root, data = FALSE)"},{"path":"https://ropensci.github.io/git2rdata/reference/recent_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the Most Recent File Change — recent_commit","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. data file refers data object (TRUE) file (FALSE)? Defaults FALSE.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/recent_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the Most Recent File Change — recent_commit","text":"data.frame commit, author recent commit adds op updates file.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/recent_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the Most Recent File Change — recent_commit","text":"","code":"# initialise a git repo using git2r repo_path <- tempfile(\"git2rdata-repo\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # write and commit a first dataframe # store the output of write_vc() minimize screen output junk <- write_vc(   iris[1:6, ], \"iris\", repo, sorting = \"Sepal.Length\", stage = TRUE,   digits = 6 ) commit(repo, \"important analysis\", session = TRUE) #> [547b9f3] 2025-01-24: important analysis list.files(repo_path) #> [1] \"iris.tsv\" \"iris.yml\" Sys.sleep(1.1) # required because git doesn't handle subsecond timings  # write and commit a second dataframe junk <- write_vc(   iris[7:12, ], \"iris2\", repo, sorting = \"Sepal.Length\", stage = TRUE,   digits = 6 ) commit(repo, \"important analysis\", session = TRUE) #> [7a9451a] 2025-01-24: important analysis list.files(repo_path) #> [1] \"iris.tsv\"  \"iris.yml\"  \"iris2.tsv\" \"iris2.yml\" Sys.sleep(1.1) # required because git doesn't handle subsecond timings  # write and commit a new version of the first dataframe junk <- write_vc(iris[7:12, ], \"iris\", repo, stage = TRUE) list.files(repo_path) #> [1] \"iris.tsv\"  \"iris.yml\"  \"iris2.tsv\" \"iris2.yml\" commit(repo, \"important analysis\", session = TRUE) #> [9caaa6a] 2025-01-24: important analysis    # find out in which commit a file was last changed  # \"iris.tsv\" was last updated in the third commit recent_commit(\"iris.tsv\", repo) #>                                     commit author                when #> 1 9caaa6a8fa8c7e4c0f10fd0911ad5cc3dd4a108f  Alice 2025-01-24 08:50:11 # \"iris.yml\" was last updated in the first commit recent_commit(\"iris.yml\", repo) #>                                     commit author                when #> 1 9caaa6a8fa8c7e4c0f10fd0911ad5cc3dd4a108f  Alice 2025-01-24 08:50:11 # \"iris2.yml\" was last updated in the second commit recent_commit(\"iris2.yml\", repo) #>                                     commit author                when #> 1 7a9451ad8382476e65f961f1ab23316659698c15  Alice 2025-01-24 08:50:10 # the git2rdata object \"iris\" was last updated in the third commit recent_commit(\"iris\", repo, data = TRUE) #>                                     commit author                when #> 1 9caaa6a8fa8c7e4c0f10fd0911ad5cc3dd4a108f  Alice 2025-01-24 08:50:11  # remove a dataframe and commit it to see what happens with deleted files file.remove(file.path(repo_path, \"iris.tsv\")) #> [1] TRUE prune_meta(repo, \".\") commit(repo, message = \"remove iris\", all = TRUE, session = TRUE) #> [c0df679] 2025-01-24: remove iris list.files(repo_path) #> [1] \"iris2.tsv\" \"iris2.yml\"  # still points to the third commit as this is the latest commit in which the # data was present recent_commit(\"iris\", repo, data = TRUE) #>                                     commit author                when #> 1 9caaa6a8fa8c7e4c0f10fd0911ad5cc3dd4a108f  Alice 2025-01-24 08:50:11"},{"path":"https://ropensci.github.io/git2rdata/reference/relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel Factor Levels by Updating the Metadata — relabel","title":"Relabel Factor Levels by Updating the Metadata — relabel","text":"Imagine situation dataframe factor variable stored write_vc(optimize = TRUE). raw data file contains factor indices metadata contains link factor index corresponding label. See vignette(\"version_control\", package = \"git2rdata\"). case, relabelling factor can fast lightweight updating metadata.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel Factor Levels by Updating the Metadata — relabel","text":"","code":"relabel(file, root = \".\", change)"},{"path":"https://ropensci.github.io/git2rdata/reference/relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel Factor Levels by Updating the Metadata — relabel","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). change either list data.frame. case list named list named vectors. names list elements must match names variables. names vector elements must match existing factor labels. values represent new factor labels. case data.frame needs variables factor (name factor), old (old) factor label new (new factor label). relabel() ignores columns.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/relabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel Factor Levels by Updating the Metadata — relabel","text":"invisible NULL.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/relabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel Factor Levels by Updating the Metadata — relabel","text":"","code":"# initialise a git repo using git2r repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a dataframe and store it as an optimized git2rdata object. # Note that write_vc() uses optimization by default. # Stage and commit the git2rdata object. ds <- data.frame(   a = c(\"a1\", \"a2\"),   b = c(\"b2\", \"b1\"),   stringsAsFactors = TRUE ) junk <- write_vc(ds, \"relabel\", repo, sorting = \"b\", stage = TRUE) cm <- commit(repo, \"initial commit\") # check that the workspace is clean status(repo) #> working directory clean  # Define new labels as a list and apply them to the git2rdata object. new_labels <- list(   a = list(a2 = \"a3\") ) relabel(\"relabel\", repo, new_labels) # check the changes read_vc(\"relabel\", repo) #>    a  b #> 1 a3 b1 #> 2 a1 b2 #>  #> Use `display_metadata()` to view the metadata. # relabel() changed the metadata, not the raw data status(repo) #> Unstaged changes: #> \tModified:   relabel.yml #>  git2r::add(repo, \"relabel.*\") cm <- commit(repo, \"relabel using a list\")  # Define new labels as a dataframe and apply them to the git2rdata object change <- data.frame(   factor = c(\"a\", \"a\", \"b\"),   old = c(\"a3\", \"a1\", \"b2\"),   new = c(\"c2\", \"c1\", \"b3\"),   stringsAsFactors = TRUE ) relabel(\"relabel\", repo, change) # check the changes read_vc(\"relabel\", repo) #>    a  b #> 1 c2 b1 #> 2 c1 b3 #>  #> Use `display_metadata()` to view the metadata. # relabel() changed the metadata, not the raw data status(repo) #> Unstaged changes: #> \tModified:   relabel.yml #>"},{"path":"https://ropensci.github.io/git2rdata/reference/rename_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a Variable — rename_variable","title":"Rename a Variable — rename_variable","text":"raw data file contains header variable names. metadata list variable names type. Changing variable name overwriting git2rdata object result error. look like removing existing variable adding new one. Overwriting object strict = FALSE potentially changes order variables, leading large diff.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/rename_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a Variable — rename_variable","text":"","code":"rename_variable(file, change, root = \".\", ...)  # S3 method for class 'character' rename_variable(file, change, root = \".\", ...)  # Default S3 method rename_variable(file, change, root, ...)  # S3 method for class 'git_repository' rename_variable(file, change, root, ..., stage = FALSE, force = FALSE)"},{"path":"https://ropensci.github.io/git2rdata/reference/rename_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a Variable — rename_variable","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. change named vector old names values new names names. root root project. Can file path git-repository. Defaults current working directory (\".\"). ... parameters used methods stage Logical value indicating whether stage changes writing data. Defaults FALSE. force Add ignored files. Default FALSE.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/rename_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a Variable — rename_variable","text":"invisible NULL.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/rename_variable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename a Variable — rename_variable","text":"function solves updating raw data header metadata.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/rename_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a Variable — rename_variable","text":"","code":"# initialise a git repo using git2r repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a dataframe and store it as an optimized git2rdata object. # Note that write_vc() uses optimization by default. # Stage and commit the git2rdata object. ds <- data.frame(   a = c(\"a1\", \"a2\"),   b = c(\"b2\", \"b1\"),   stringsAsFactors = TRUE ) junk <- write_vc(ds, \"rename\", repo, sorting = \"b\", stage = TRUE) cm <- commit(repo, \"initial commit\") # check that the workspace is clean status(repo) #> working directory clean  # Define change. change <- c(new_name = \"a\") rename_variable(file = \"rename\", change = change, root = repo) #> ec551b8fd0164c484d0a68709017d9d547d83bea  #>                             \"rename.tsv\"  #> 34818c45742ac845b073ebbbc87411abb2dc7ac7  #>                             \"rename.yml\"  # check the changes read_vc(\"rename\", repo) #>   new_name  b #> 1       a2 b1 #> 2       a1 b2 #>  #> Use `display_metadata()` to view the metadata. status(repo) #> Unstaged changes: #> \tModified:   rename.tsv #> \tModified:   rename.yml #>"},{"path":"https://ropensci.github.io/git2rdata/reference/repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-exported Function From git2r — repository","title":"Re-exported Function From git2r — repository","text":"See repository git2r.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/rm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Data Files From Git2rdata Objects — rm_data","title":"Remove Data Files From Git2rdata Objects — rm_data","text":"Remove data (.tsv) file valid git2rdata objects path. metadata remains untouched. warning lists git2rdata object invalid metadata. function keeps .tsv file invalid metadata non-git2rdata objects. Use function caution since remove valid data files without asking confirmation. strongly recommend use function files version control. See vignette(\"workflow\", package = \"git2rdata\") examples use .","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/rm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Data Files From Git2rdata Objects — rm_data","text":"","code":"rm_data(root = \".\", path = NULL, recursive = TRUE, ...)  # S3 method for class 'git_repository' rm_data(   root,   path = NULL,   recursive = TRUE,   ...,   stage = FALSE,   type = c(\"unmodified\", \"modified\", \"ignored\", \"all\") )"},{"path":"https://ropensci.github.io/git2rdata/reference/rm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Data Files From Git2rdata Objects — rm_data","text":"root root project. Can file path git-repository. Defaults current working directory (\".\"). path directory clean data files. directory relative root. recursive remove files subdirectories . ... parameters used methods stage stage changes removing files. Defaults FALSE. type Defines classes files remove. unmodified files git history unchanged since last commit. modified files git history changed since last commit. ignored refers file listed .gitignore file. Selecting modified remove unmodified modified data files. Selecting ìgnored remove unmodified, modified ignored data files. refers visible data files, including untracked files.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/rm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Data Files From Git2rdata Objects — rm_data","text":"returns invisibly vector removed files names. paths relative root.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/rm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Data Files From Git2rdata Objects — rm_data","text":"","code":"## on file system  # create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # store a dataframe as git2rdata object. Capture the result to minimise # screen output junk <- write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta # write a standard tab separate file (non git2rdata object) write.table(iris, file = file.path(root, \"standard.tsv\"), sep = \"\\t\") # write a YAML file yml <- list(   authors = list(    \"Research Institute for Nature and Forest\" = list(        href = \"https://www.inbo.be/en\"))) yaml::write_yaml(yml, file = file.path(root, \"_pkgdown.yml\"))  # list the git2rdata objects list_data(root) #> [1] \"iris.tsv\" # list the files list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"iris.tsv\"     \"iris.yml\"     \"standard.tsv\"  # remove all .tsv files from valid git2rdata objects rm_data(root, path = \".\") # check the removal of the .tsv file list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"iris.yml\"     \"standard.tsv\" list_data(root) #> character(0)  # remove dangling git2rdata metadata files prune_meta(root, path = \".\") #> Warning: Invalid metadata files found. See ?is_git2rmeta(): #> _pkgdown.yml # check the removal of the metadata list.files(root, recursive = TRUE) #> [1] \"_pkgdown.yml\" \"standard.tsv\" list_data(root) #> character(0)   ## on git repo  # initialise a git repo using git2r repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # store a dataframe write_vc(iris[1:6, ], \"iris\", repo, sorting = \"Sepal.Length\", stage = TRUE) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check that the dataframe is stored status(repo) #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>  list_data(repo) #> [1] \"iris.tsv\"  # commit the current version and check the git repo commit(repo, \"add iris data\", session = TRUE) #> [a99ec6c] 2025-01-24: add iris data status(repo) #> working directory clean  # remove the data files from the repo rm_data(repo, path = \".\") # check the removal list_data(repo) #> character(0) status(repo) #> Unstaged changes: #> \tDeleted:    iris.tsv #>   # remove dangling metadata prune_meta(repo, path = \".\") # check the removal list_data(repo) #> character(0) status(repo) #> Unstaged changes: #> \tDeleted:    iris.tsv #> \tDeleted:    iris.yml #>"},{"path":"https://ropensci.github.io/git2rdata/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-exported Function From git2r — status","title":"Re-exported Function From git2r — status","text":"See status git2r.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/summary.git2rdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for git2rdata objects. — summary.git2rdata","title":"Summary method for git2rdata objects. — summary.git2rdata","text":"Prints summary data description columns available.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/summary.git2rdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for git2rdata objects. — summary.git2rdata","text":"","code":"# S3 method for class 'git2rdata' summary(object, ...)"},{"path":"https://ropensci.github.io/git2rdata/reference/summary.git2rdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for git2rdata objects. — summary.git2rdata","text":"object git2rdata object ... additional arguments passed summary","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/update_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the description of a git2rdata object — update_metadata","title":"Update the description of a git2rdata object — update_metadata","text":"Allows update description fields, table name, title, description git2rdata object. arguments optional. Setting argument NA empty string remove corresponding field metadata.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/update_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the description of a git2rdata object — update_metadata","text":"","code":"update_metadata(   file,   root = \".\",   field_description,   name,   title,   description,   ... )"},{"path":"https://ropensci.github.io/git2rdata/reference/update_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the description of a git2rdata object — update_metadata","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). field_description named character vector new descriptions fields. names vector must match variable names. name character string new table name object. title character string new title object. description character string new description object. ... parameters used methods","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/upgrade_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Upgrade Files to the New Version — upgrade_data","title":"Upgrade Files to the New Version — upgrade_data","text":"Updates data written older versions current data format standard. Works single file (recursively) path. \".yml\" file must contain \"..generic\" element. upgrade_data() ignores files.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/upgrade_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upgrade Files to the New Version — upgrade_data","text":"","code":"upgrade_data(file, root = \".\", verbose, ..., path)  # S3 method for class 'git_repository' upgrade_data(   file,   root = \".\",   verbose = TRUE,   ...,   path,   stage = FALSE,   force = FALSE )"},{"path":"https://ropensci.github.io/git2rdata/reference/upgrade_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upgrade Files to the New Version — upgrade_data","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). verbose display message update status. Defaults TRUE. ... parameters used methods path specify path instead file update git2rdata objects directory subdirectories. path relative root. Use path = \".\" upgrade git2rdata objects root. stage Logical value indicating whether stage changes writing data. Defaults FALSE. force Add ignored files. Default FALSE.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/upgrade_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upgrade Files to the New Version — upgrade_data","text":"git2rdata object names.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/upgrade_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upgrade Files to the New Version — upgrade_data","text":"","code":"# create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # write dataframes to the root write_vc(   iris[1:6, ], file = \"iris\", root = root, sorting = \"Sepal.Length\",   digits = 6 ) #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  write_vc(   iris[5:10, ], file = \"subdir/iris\", root = root, sorting = \"Sepal.Length\",   digits = 6 ) #> Warning: Sorting on 'Sepal.Length' results in ties. #> Add extra sorting variables to ensure small diffs. #> 6e79e0fe40f73c14a7ffc87da75d5637b5986a23  #>                        \"subdir/iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                        \"subdir/iris.yml\"  # upgrade a single git2rdata object upgrade_data(file = \"iris\", root = root) #> iris already up to date #> meta_file  #>    \"iris\"  # use path = \".\" to upgrade all git2rdata objects under root upgrade_data(path = \".\", root = root) #> iris already up to date #> ./subdir/iris already up to date #>        ./iris.yml ./subdir/iris.yml  #>            \"iris\"   \"./subdir/iris\""},{"path":"https://ropensci.github.io/git2rdata/reference/verify_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a file an verify the presence of variables — verify_vc","title":"Read a file an verify the presence of variables — verify_vc","text":"Reads file read_vc(). verifies every variable listed variables present data.frame.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/verify_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a file an verify the presence of variables — verify_vc","text":"","code":"verify_vc(file, root, variables)"},{"path":"https://ropensci.github.io/git2rdata/reference/verify_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a file an verify the presence of variables — verify_vc","text":"file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). variables character vector variable names.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/write_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","title":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","text":"git2rdata object consists two files. \".tsv\" file contains raw data plain text tab separated file. \".yml\" contains metadata columns plain text YAML format. See vignette(\"plain text\", package = \"git2rdata\") details implementation.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/write_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","text":"","code":"write_vc(   x,   file,   root = \".\",   sorting,   strict = TRUE,   optimize = TRUE,   na = \"NA\",   ...,   split_by )  # S3 method for class 'character' write_vc(   x,   file,   root = \".\",   sorting,   strict = TRUE,   optimize = TRUE,   na = \"NA\",   ...,   append = FALSE,   split_by = character(0),   digits )  # S3 method for class 'git_repository' write_vc(   x,   file,   root,   sorting,   strict = TRUE,   optimize = TRUE,   na = \"NA\",   ...,   stage = FALSE,   force = FALSE )"},{"path":"https://ropensci.github.io/git2rdata/reference/write_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","text":"x data.frame. file name git2rdata object. Git2rdata objects dots name. name may include relative path. file path relative root. Note file must point location within root. root root project. Can file path git-repository. Defaults current working directory (\".\"). sorting optional vector column names defining columns use sorting x order use . default empty sorting yields warning. Add sorting avoid warning. Strongly recommended combination version control. See vignette(\"efficiency\", package = \"git2rdata\") illustration importance sorting. strict metadata changes. strict = FALSE overwrites data metadata warning listing changes, strict = TRUE returns error leaves data metadata . Defaults TRUE. optimize TRUE, recode data get smaller text files. FALSE, meta() converts data character. Defaults TRUE. na string use missing values data. ... parameters used methods split_by optional vector variables name split text files. creates separate file every combination. prepend variables vector sorting variables. append logical. relevant file character     string.  TRUE, output appended     file.  FALSE, existing file name destroyed. digits number significant digits smallest absolute value. function applies rounding automatically. relevant numeric variables. Either single positive integer named vector names link variables data.frame. Defaults 6 warning. stage Logical value indicating whether stage changes writing data. Defaults FALSE. force Add ignored files. Default FALSE.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/write_vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","text":"named vector file paths relative root. names contain hashes files.","code":""},{"path":"https://ropensci.github.io/git2rdata/reference/write_vc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","text":"..generic reserved name metadata forbidden column name data.frame.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/reference/write_vc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store a Data.Frame as a Git2rdata Object on Disk — write_vc","text":"","code":"## on file system  # create a directory root <- tempfile(\"git2rdata-\") dir.create(root)  # write a dataframe to the directory write_vc(   iris[1:6, ], file = \"iris\", root = root, sorting = \"Sepal.Length\",   digits = 6 ) #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # check that a data file (.tsv) and a metadata file (.yml) exist. list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # read the git2rdata object from the directory read_vc(\"iris\", root) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.6         3.1          1.5         0.2  setosa #> 2          4.7         3.2          1.3         0.2  setosa #> 3          4.9         3.0          1.4         0.2  setosa #> 4          5.0         3.6          1.4         0.2  setosa #> 5          5.1         3.5          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  #> Use `display_metadata()` to view the metadata.  # store a new version with different observations but the same metadata write_vc(iris[1:5, ], \"iris\", root) #> 31ff841b58e569e8a4a4ac2f02152295c19f94db  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # Removing a column requires version requires new metadata. # Add strict = FALSE to override the existing metadata. write_vc(   iris[1:6, -2], \"iris\", root, sorting = \"Sepal.Length\", strict = FALSE ) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - New data has a different number of variables. #> - Deleted variables: Sepal.Width. #> b2098d507b0d749a86bb61a185ab2d31f7622418  #>                               \"iris.tsv\"  #> 08179205a52ffe296818ef844180093eaaadfe00  #>                               \"iris.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # storing the orignal version again requires another update of the metadata write_vc(iris[1:6, ], \"iris\", root, sorting = \"Sepal.Width\", strict = FALSE) #> Warning: Changes in the metadata may lead to unnecessarily large diffs. #> See vignette('version_control', package = 'git2rdata') for more information. #>  #> - The sorting variables changed. #>     - Sorting for the new data: 'Sepal.Width'. #>     - Sorting for the old data: 'Sepal.Length'. #> - New data has a different number of variables. #> - New variables: Sepal.Width. #> 4045436d3a61801f4eaad5769e32726838deecbc  #>                               \"iris.tsv\"  #> 4e0919ca66a485cf0e198981782f3cd122d10fef  #>                               \"iris.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\" \"iris.yml\" # optimize = FALSE stores the data more verbose. This requires larger files. write_vc(   iris[1:6, ], \"iris2\", root, sorting = \"Sepal.Width\", optimize = FALSE ) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 79547bc5fecc2c82bd01988d1591130e578fdcf9  #>                              \"iris2.csv\"  #> 4f86db2012b3267f1a50131945158aead6d918ec  #>                              \"iris2.yml\"  list.files(root, recursive = TRUE) #> [1] \"iris.tsv\"  \"iris.yml\"  \"iris2.csv\" \"iris2.yml\"    ## on git repo using a git2r::git-repository  # initialise a git repo using the git2r package repo_path <- tempfile(\"git2rdata-repo-\") dir.create(repo_path) repo <- git2r::init(repo_path) git2r::config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # store a dataframe in git repo. write_vc(iris[1:6, ], file = \"iris\", root = repo, sorting = \"Sepal.Length\") #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 09d5bfd6a65e682a4ca030c766348180861568c8  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  # This git2rdata object is not staged by default. status(repo) #> Untracked files: #> \tUntracked:  iris.tsv #> \tUntracked:  iris.yml #>  # read a dataframe from a git repo read_vc(\"iris\", repo) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.6         3.1          1.5         0.2  setosa #> 2          4.7         3.2          1.3         0.2  setosa #> 3          4.9         3.0          1.4         0.2  setosa #> 4          5.0         3.6          1.4         0.2  setosa #> 5          5.1         3.5          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  #> Use `display_metadata()` to view the metadata.  # store a new version in the git repo and stage it in one go write_vc(iris[1:5, ], \"iris\", repo, stage = TRUE) #> 31ff841b58e569e8a4a4ac2f02152295c19f94db  #>                               \"iris.tsv\"  #> f5eda4fcbe143eefc267a51a511110c604848272  #>                               \"iris.yml\"  status(repo) #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>   # store a verbose version in a different gir2data object write_vc(   iris[1:6, ], \"iris2\", repo, sorting = \"Sepal.Width\", optimize = FALSE ) #> Warning: `digits` was not set. Setting is automatically to 6. See ?meta #> 79547bc5fecc2c82bd01988d1591130e578fdcf9  #>                              \"iris2.csv\"  #> 4f86db2012b3267f1a50131945158aead6d918ec  #>                              \"iris2.yml\"  status(repo) #> Untracked files: #> \tUntracked:  iris2.csv #> \tUntracked:  iris2.yml #>  #> Staged changes: #> \tNew:        iris.tsv #> \tNew:        iris.yml #>"},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-050","dir":"Changelog","previous_headings":"","what":"git2rdata 0.5.0","title":"git2rdata 0.5.0","text":"read_vc() handles empty datasets stored split_by. write_vc() meta() gain digits argument. arguments specifies number significant digits store numeric values.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-041","dir":"Changelog","previous_headings":"","what":"git2rdata 0.4.1","title":"git2rdata 0.4.1","text":"CRAN release: 2024-09-06 Add update_metadata() update description git2rdata object. See vignette(\"metadata\") details. Update checklist pkgdown infrastructure.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-040","dir":"Changelog","previous_headings":"","what":"git2rdata 0.4.0","title":"git2rdata 0.4.0","text":"CRAN release: 2022-03-17","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"git2rdata 0.4.0","text":"write_vc() stores non optimised files comma separated values rather tab separated values. general public seems better recognised .csv files .tsv files data files. Add new function verify_vc() reads git2rdata object verifies presence set variables. return data upon success.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"internal-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"git2rdata 0.4.0","text":"Upgrade Roxygen2 7.1.2 Add inst/CITATION, CITATION.cff, .zenodo.json","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-031","dir":"Changelog","previous_headings":"","what":"git2rdata 0.3.1","title":"git2rdata 0.3.1","text":"CRAN release: 2021-01-21 Use icuSetCollate() define standardised sorting.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"git2rdata 0.3.0","text":"write_vc() gains optional split_by argument. See vignette(\"split_by\") details. rename_variable() efficiently renames variables stored git2rdata object.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"bugfixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"git2rdata 0.3.0","text":"read_vc(), is_git2rdata() is_git2rmeta() now yield better message data metadata missing.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-022","dir":"Changelog","previous_headings":"","what":"git2rdata 0.2.2","title":"git2rdata 0.2.2","text":"Use checklist package CI.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-021","dir":"Changelog","previous_headings":"","what":"git2rdata 0.2.1","title":"git2rdata 0.2.1","text":"CRAN release: 2020-03-02","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"bugfixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"git2rdata 0.2.1","text":"Explicitly use stringsAsFactors data.frame() examples unit tests dataframe contains characters. upcoming change default value stringsAsFactors requires change. See https://developer.r-project.org/Blog/public/2020/02/16/stringsasfactors/index.html","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-020","dir":"Changelog","previous_headings":"","what":"git2rdata 0.2.0","title":"git2rdata 0.2.0","text":"CRAN release: 2019-11-18","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"breaking-features-0-2-0","dir":"Changelog","previous_headings":"","what":"BREAKING FEATURES","title":"git2rdata 0.2.0","text":"Calculation data hash changed (#53). must use upgrade_data() read data stored older version. is_git2rdata() upgrade_data() longer test equality data hashes (read_vc() still ). write_vc() read_vc() fail file location outside root (#50). Reordering factor levels requires strict = TRUE.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"bugfixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"git2rdata 0.2.0","text":"Linux Windows machines now generated data hash (#49).","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2rdata 0.2.0","text":"Internal sorting uses “C” locale, regardless current locale. read_vc() reads older stored older version (#44). version old, prompts upgrade_data(). Improve warnings() error() messages. Use vector version logo.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-01","dir":"Changelog","previous_headings":"","what":"git2rdata 0.1","title":"git2rdata 0.1","text":"CRAN release: 2019-06-17 Transfer rOpenSci. Use new logo (@peterdesmet, #37). Add estimate upper bound number commits.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-005","dir":"Changelog","previous_headings":"","what":"git2rdata 0.0.5","title":"git2rdata 0.0.5","text":"upgrade_data() uses order metadata write_vc().","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"breaking-features-0-0-4","dir":"Changelog","previous_headings":"","what":"BREAKING FEATURES","title":"git2rdata 0.0.4","text":"write_vc() stores git2rdata version number metadata. Use upgrade_data() update existing data.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"new-features-0-0-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2rdata 0.0.4","text":"read_vc() checks meta data hash. mismatch results error. meta data gains data hash. mismatch throws warning reading object. tolerates updating data software, informing user change occurred. is_git2rmeta() validates metadata. list_data() lists files valid metadata. rm_data() prune_meta() remove files valid metadata. don’t touch tsv file without metadata yml files associated git2rdata. Files invalid metadata yield warning list_data(), rm_data() prune_meta().","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"bugfixes-0-0-4","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"git2rdata 0.0.4","text":"write_vc() relabel() handle empty strings ('') characters factors (#24). read_vc() longer treats # comment character. read_vc() handles non ASCII characters Windows.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"other-changes-0-0-4","dir":"Changelog","previous_headings":"","what":"Other changes","title":"git2rdata 0.0.4","text":"Use faster algorithm detect duplicates (suggestion @brodieG). Improve documentation. Fix typo’s documentation, vignettes README. Add rOpenSci review badge README. README mentions upper bound size dataframes. Set lifecycle “maturing” repo status “active”. functions handle root containing regex expressions. Rework vignette(\"workflow\", package = \"git2rdata\"). Update timings vignette(\"efficiency\", package = \"git2rdata\") Minor tweaks vignette(\"plain_text\", package = \"git2rdata\")","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"git2rdata-003","dir":"Changelog","previous_headings":"","what":"git2rdata 0.0.3","title":"git2rdata 0.0.3","text":"Fix typo’s documentation, vignettes README.","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"git2rdata 0.0.2","text":"meta() appends metadata list objects rather YAML format. yaml::write_yaml() writes metadata list YAML format. write_vc() now uses ‘strict’ argument instead ‘override’. rm_data() removes data files. Use prune_meta() remove left-metadata files (#9).","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2rdata 0.0.2","text":"Vignette efficiency added (#2). Focus plain text format. Focus version control. Focus workflows. S3 methods replace old S4 methods (#8). Optimized factors use stable indices. Adding removing levels result smaller diffs (#13). Use relabel() alter factor levels without changing index (#13). write.table() stores raw data instead readr::write_tsv() (#7). avoids readr dependency. write_vc() read_vc() use current working directory default root (#6, @florisvdh). user can specify string code missing values (default = NA). allows storage character string \"NA\". write_vc() returns list issues potentially result large diffs. list_data() returns vector dataframes repository.","code":""},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"other-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Other changes","title":"git2rdata 0.0.2","text":"write_vc() allows use custom NA string. helpfile contains working example (#11). Updated rationale links vignettes. git2rdata hexagon sticker logo. Add . installation instructions use remotes build vignettes. removed auto_commit() limited extra functionality git2r::commit().","code":""},{"path":[]},{"path":"https://ropensci.github.io/git2rdata/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2rdata 0.0.1","text":"Use readr write read plain text files. Allow storage strings “NA” special characters. Handle ordered factors. Stop handling complex numbers.","code":""}]
