% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_data.R
\name{list_data}
\alias{list_data}
\title{List Available Git2rdata Files Containing Data}
\usage{
list_data(root = ".", path = ".", recursive = TRUE)
}
\arguments{
\item{root}{the \code{root} of the repository. Either a path or a \code{git-repository}}

\item{path}{relative \code{path} from the \code{root}. Defaults to the \code{root}}

\item{recursive}{logical.  Should the listing recurse into directories?}
}
\value{
A character vector of git2rdata object names, including their
relative path.
}
\description{
The function returns the names of all valid git2rdata objects. This implies
\code{.tsv} files with a matching \strong{valid} metadata file (\code{.yml}). \strong{Invalid}
metadata files result in a warning. The function ignores \strong{valid} metadata
files without matching raw data (\code{.tsv}).
}
\examples{
## on file system

# create a directory
root <- tempfile("git2rdata-")
dir.create(root)

# store a dataframe as git2rdata object. Capture the result to minimise
# screen output
junk <- write_vc(iris[1:6, ], "iris", root, sorting = "Sepal.Length")
# write a standard tab separate file (non git2rdata object)
write.table(iris, file = file.path(root, "standard.tsv"), sep = "\t")
# write a YAML file
yml <- list(
  authors = list(
   "Research Institute for Nature and Forest" = list(
       href = "https://www.inbo.be/en")))
yaml::write_yaml(yml, file = file.path(root, "_pkgdown.yml"))

# list the git2rdata objects
list_data(root)
# list the files
list.files(root, recursive = TRUE)

# remove all .tsv files from valid git2rdata objects
rm_data(root, path = ".")
# check the removal of the .tsv file
list.files(root, recursive = TRUE)
list_data(root)

# remove dangling git2rdata metadata files
prune_meta(root, path = ".")
# check the removal of the metadata
list.files(root, recursive = TRUE)
list_data(root)


## on git repo

# initialise a git repo using git2r
repo_path <- tempfile("git2rdata-repo-")
dir.create(repo_path)
repo <- git2r::init(repo_path)
git2r::config(repo, user.name = "Alice", user.email = "alice@example.org")

# store a dataframe
write_vc(iris[1:6, ], "iris", repo, sorting = "Sepal.Length", stage = TRUE)
# check that the dataframe is stored
status(repo)
list_data(repo)

# commit the current version and check the git repo
commit(repo, "add iris data", session = TRUE)
status(repo)

# remove the data files from the repo
rm_data(repo, path = ".")
# check the removal
list_data(repo)
status(repo)

# remove dangling metadata
prune_meta(repo, path = ".")
# check the removal
list_data(repo)
status(repo)
}
\seealso{
Other storage: 
\code{\link{display_metadata}()},
\code{\link{prune_meta}()},
\code{\link{read_vc}()},
\code{\link{relabel}()},
\code{\link{rename_variable}()},
\code{\link{rm_data}()},
\code{\link{update_metadata}()},
\code{\link{verify_vc}()},
\code{\link{write_vc}()}
}
\concept{storage}
